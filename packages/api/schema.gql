# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input AddAttributesGroupToRubricInput {
  attributesGroupId: ID!
  rubricId: ID!
}

input AddAttributeToGroupInput {
  groupId: ID!
  metric: ID
  name: [LangInput!]!
  options: ID
  variant: AttributeVariantEnum!
}

input AddOptionToGroupInput {
  color: String
  groupId: ID!
  name: [LangInput!]!
}

type AssetType {
  index: Int!
  url: String!
}

type Attribute {
  id: ID!
  metric: Metric
  name: [LanguageType!]!
  nameString: String!
  options: OptionsGroup
  slug: String!
  variant: AttributeVariantEnum!
}

type AttributesGroup {
  attributes: [Attribute!]!
  id: ID!
  name: [LanguageType!]!
  nameString: String!
}

type AttributesGroupPayloadType {
  group: AttributesGroup
  message: String!
  success: Boolean!
}

type AttributeVariant {
  id: ID!
  nameString: String!
}

"""Attribute type enum"""
enum AttributeVariantEnum {
  multipleSelect
  number
  select
  string
}

input CreateAttributesGroupInput {
  name: [LangInput!]!
}

input CreateMetricInput {
  name: [LangInput!]!
}

input CreateOptionsGroupInput {
  name: [LangInput!]!
}

input CreateRubricInput {
  catalogueName: [LangInput!]!
  name: [LangInput!]!
  parent: ID
  variant: ID
}

input CreateRubricVariantInput {
  name: [LangInput!]!
}

input CreateUserInput {
  email: String!
  lastName: String
  name: String!
  phone: String!
  role: String
  secondName: String
}

input DeleteAttributeFromGroupInput {
  attributeId: ID!
  groupId: ID!
}

input DeleteAttributesGroupFromRubricInput {
  attributesGroupId: ID!
  rubricId: ID!
}

input DeleteOptionFromGroupInput {
  groupId: ID!
  optionId: ID!
}

"""JSON object"""
scalar JSONObject

input LangInput {
  key: String!
  value: String!
}

type LanguageType {
  key: String!
  value: String!
}

type Metric {
  id: ID!
  name: [LanguageType!]!
  nameString: String!
}

type MetricPayloadType {
  message: String!
  metric: Metric
  success: Boolean!
}

type Mutation {
  addAttributesGroupToRubric(input: AddAttributesGroupToRubricInput!): RubricPayloadType!
  addAttributeToGroup(input: AddAttributeToGroupInput!): AttributesGroupPayloadType!
  addOptionToGroup(input: AddOptionToGroupInput!): OptionsGroupPayloadType!
  createAttributesGroup(input: CreateAttributesGroupInput!): AttributesGroupPayloadType!
  createMetric(input: CreateMetricInput!): MetricPayloadType!
  createOptionsGroup(input: CreateOptionsGroupInput!): OptionsGroupPayloadType!
  createRubric(input: CreateRubricInput!): RubricPayloadType!
  createRubricVariant(input: CreateRubricVariantInput!): RubricVariantPayloadType!
  createUser(input: CreateUserInput!): UserPayloadType!
  deleteAttributeFromGroup(input: DeleteAttributeFromGroupInput!): AttributesGroupPayloadType!
  deleteAttributesGroup(id: ID!): AttributesGroupPayloadType!
  deleteAttributesGroupFromRubric(input: DeleteAttributesGroupFromRubricInput!): RubricPayloadType!
  deleteMetric(id: ID!): MetricPayloadType!
  deleteOptionFromGroup(input: DeleteOptionFromGroupInput!): OptionsGroupPayloadType!
  deleteOptionsGroup(id: ID!): OptionsGroupPayloadType!
  deleteRubric(id: ID!): RubricPayloadType!
  deleteRubricVariant(id: ID!): RubricVariantPayloadType!
  deleteUser(id: ID!): UserPayloadType!
  signIn(input: SignInInput!): UserPayloadType!
  signOut: UserPayloadType!
  signUp(input: SignUpInput!): UserPayloadType!
  updateAttributeInGroup(input: UpdateAttributeInGroupInput!): AttributesGroupPayloadType!
  updateAttributesGroup(input: UpdateAttributesGroupInput!): AttributesGroupPayloadType!
  updateMetric(input: UpdateMetricInput!): MetricPayloadType!
  updateOptionInGroup(input: UpdateOptionInGroupInput!): OptionsGroupPayloadType!
  updateOptionsGroup(input: UpdateOptionsGroupInput!): OptionsGroupPayloadType!
  updateRubric(input: UpdateRubricInput!): RubricPayloadType!
  updateRubricVariant(input: UpdateRubricVariantInput!): RubricVariantPayloadType!
  updateUser(input: UpdateUserInput!): UserPayloadType!
}

type Option {
  color: String
  id: ID!
  name: [LanguageType!]!
  nameString: String!
}

type OptionsGroup {
  id: ID!
  name: [LanguageType!]!
  nameString: String!
  options: [Option!]!
}

type OptionsGroupPayloadType {
  group: OptionsGroup
  message: String!
  success: Boolean!
}

type PaginatedProductsResponse {
  docs: [Product!]!
  hasNextPage: Int!
  hasPrevPage: Int!
  limit: Int!
  nextPage: Int
  page: Int
  pagingCounter: Int!
  prevPage: Int
  totalDocs: Int!
  totalPages: Int!
}

type PaginatedUsersResponse {
  docs: [User!]!
  hasNextPage: Int!
  hasPrevPage: Int!
  limit: Int!
  nextPage: Int
  page: Int
  pagingCounter: Int!
  prevPage: Int
  totalDocs: Int!
  totalPages: Int!
}

"""Pagination sortDir enum"""
enum PaginateSortDirectionEnum {
  asc
  desc
}

type Product {
  cities: [ProductCity!]!
  createdAt: Timestamp!
  id: ID!
  itemId: Int!
  updatedAt: Timestamp!
}

type ProductAttribute {
  node: Attribute!
  showInCard: Boolean!
  value: JSONObject!
}

type ProductAttributesGroup {
  attributes: [ProductAttribute!]!
  node: AttributesGroup!
  showInCard: Boolean!
}

type ProductCity {
  key: String!
  node: ProductNode!
}

type ProductNode {
  assets: [AssetType!]!
  attributesGroups: [ProductAttributesGroup!]!
  attributesSource: ID!
  cardName: [LanguageType!]!
  description: [LanguageType!]!
  name: [LanguageType!]!
  price: Int!
  rubrics: [ID!]!
  slug: String!
}

input ProductPaginateInput {
  limit: Int = 100
  noRubrics: Boolean
  notInRubric: ID
  page: Int = 1
  query: String
  rubric: ID
  sortBy: ProductSortByEnum = createdAt
  sortDir: PaginateSortDirectionEnum = desc
}

"""Product pagination sortBy enum"""
enum ProductSortByEnum {
  createdAt
  price
}

type Query {
  getAllAttributesGroups(
    """list of excluded groups id's"""
    exclude: [ID!]
  ): [AttributesGroup!]!
  getAllMetrics: [Metric!]
  getAllOptionsGroups: [OptionsGroup!]!
  getAllProducts(input: ProductPaginateInput!): PaginatedProductsResponse!
  getAllRubricVariants: [RubricVariant!]
  getAllUsers(input: UserPaginateInput!): PaginatedUsersResponse!
  getAttribute(id: ID!): Attribute
  getAttributesGroup(id: ID!): AttributesGroup
  getAttributeVariants: [AttributeVariant!]
  getMetric(id: ID!): Metric
  getOption(id: ID!): Option
  getOptionsGroup(id: ID!): OptionsGroup
  getProduct(id: ID!): Product!
  getRubric(id: ID!): Rubric!
  getRubricsTree(excluded: [ID!]): [Rubric!]!
  getRubricVariant(id: ID!): RubricVariant
  getUser(id: ID!): User
  me: User
}

type Rubric {
  active: Boolean!
  attributesGroups: [RubricAttributesGroup!]!
  catalogueName: String!
  children(excluded: [ID!]): [Rubric!]!
  cities: [RubricCity!]!
  id: ID!
  level: Int!
  name: String!
  parent: Rubric
  slug: String!
  variant: RubricVariant
}

type RubricAttributesGroup {
  node: AttributesGroup!
  showInCatalogueFilter: Boolean!
}

type RubricCity {
  key: String!
  node: RubricNode!
}

type RubricNode {
  active: Boolean
  attributesGroups: [RubricAttributesGroup!]!
  catalogueName: [LanguageType!]!
  level: Int!
  name: [LanguageType!]!
  parent: Rubric
  slug: String!
  variant: RubricVariant
}

type RubricPayloadType {
  message: String!
  rubric: Rubric
  success: Boolean!
}

type RubricVariant {
  id: ID!
  name: [LanguageType!]!
  nameString: String!
}

type RubricVariantPayloadType {
  message: String!
  success: Boolean!
  variant: RubricVariant
}

input SignInInput {
  email: String!
  password: String!
}

input SignUpInput {
  email: String!
  lastName: String
  name: String!
  password: String!
  phone: String
  secondName: String
}

"""
The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

input UpdateAttributeInGroupInput {
  attributeId: ID!
  groupId: ID!
  metric: ID
  name: [LangInput!]!
  options: ID
  variant: AttributeVariantEnum!
}

input UpdateAttributesGroupInput {
  id: ID!
  name: [LangInput!]!
}

input UpdateMetricInput {
  id: ID!
  name: [LangInput!]!
}

input UpdateOptionInGroupInput {
  color: String
  groupId: ID!
  name: [LangInput!]!
  optionId: ID!
}

input UpdateOptionsGroupInput {
  id: ID!
  name: [LangInput!]!
}

input UpdateRubricInput {
  catalogueName: [LangInput!]!
  id: ID!
  name: [LangInput!]!
  parent: ID
  variant: ID
}

input UpdateRubricVariantInput {
  id: ID!
  name: [LangInput!]!
}

input UpdateUserInput {
  email: String!
  id: ID!
  lastName: String
  name: String!
  phone: String!
  role: String!
  secondName: String
}

type User {
  createdAt: Timestamp!
  email: String!
  fullName: String!
  id: ID!
  isAdmin: Boolean!
  isCustomer: Boolean!
  isManager: Boolean!
  itemId: Int!
  lastName: String
  name: String!
  phone: String!
  role: String!
  secondName: String
  shortName: String!
  updatedAt: Timestamp!
}

input UserPaginateInput {
  limit: Int = 100
  page: Int = 1
  query: String
  sortBy: UserSortByEnum = createdAt
  sortDir: PaginateSortDirectionEnum = desc
}

type UserPayloadType {
  message: String!
  success: Boolean!
  user: User
}

"""User pagination sortBy enum"""
enum UserSortByEnum {
  createdAt
  email
  lastName
  name
  phone
  role
  secondName
}
