/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import type * as dbModels from './../db/dbModels';
import type { NexusContext } from './../types/apiContextTypes';
import type { core } from 'nexus';
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.CommonInputFieldConfig<TypeName, FieldName>,
    ): void; // "JSONObject";
    /**
     * A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
     */
    email<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.CommonInputFieldConfig<TypeName, FieldName>,
    ): void; // "EmailAddress";
    /**
     * A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
     */
    url<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.CommonInputFieldConfig<TypeName, FieldName>,
    ): void; // "URL";
    /**
     * A field whose value conforms to the standard E.164 format as specified in: https://en.wikipedia.org/wiki/E.164. Basically this is +17895551234.
     */
    phone<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.CommonInputFieldConfig<TypeName, FieldName>,
    ): void; // "PhoneNumber";
    /**
     * Date custom scalar type
     */
    date<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.CommonInputFieldConfig<TypeName, FieldName>,
    ): void; // "Date";
    /**
     * Mongo object id scalar type
     */
    objectId<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.CommonInputFieldConfig<TypeName, FieldName>,
    ): void; // "ObjectId";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(
      fieldName: FieldName,
      ...opts: core.ScalarOutSpread<TypeName, FieldName>
    ): void; // "JSONObject";
    /**
     * A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
     */
    email<FieldName extends string>(
      fieldName: FieldName,
      ...opts: core.ScalarOutSpread<TypeName, FieldName>
    ): void; // "EmailAddress";
    /**
     * A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
     */
    url<FieldName extends string>(
      fieldName: FieldName,
      ...opts: core.ScalarOutSpread<TypeName, FieldName>
    ): void; // "URL";
    /**
     * A field whose value conforms to the standard E.164 format as specified in: https://en.wikipedia.org/wiki/E.164. Basically this is +17895551234.
     */
    phone<FieldName extends string>(
      fieldName: FieldName,
      ...opts: core.ScalarOutSpread<TypeName, FieldName>
    ): void; // "PhoneNumber";
    /**
     * Date custom scalar type
     */
    date<FieldName extends string>(
      fieldName: FieldName,
      ...opts: core.ScalarOutSpread<TypeName, FieldName>
    ): void; // "Date";
    /**
     * Mongo object id scalar type
     */
    objectId<FieldName extends string>(
      fieldName: FieldName,
      ...opts: core.ScalarOutSpread<TypeName, FieldName>
    ): void; // "ObjectId";
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  AddAttributeToGroupInput: {
    // input type
    attributesGroupId: NexusGenScalars['ObjectId']; // ObjectId!
    capitalise?: boolean | null; // Boolean
    metricId?: NexusGenScalars['ObjectId'] | null; // ObjectId
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
    notShowAsAlphabet?: boolean | null; // Boolean
    optionsGroupId?: NexusGenScalars['ObjectId'] | null; // ObjectId
    positioningInCardTitle?: NexusGenScalars['JSONObject'] | null; // JSONObject
    positioningInTitle?: NexusGenScalars['JSONObject'] | null; // JSONObject
    showAsBreadcrumb: boolean; // Boolean!
    showAsCatalogueBreadcrumb: boolean; // Boolean!
    showInCard: boolean; // Boolean!
    showInCardTitle: boolean; // Boolean!
    showInCatalogueFilter: boolean; // Boolean!
    showInCatalogueNav: boolean; // Boolean!
    showInCatalogueTitle: boolean; // Boolean!
    showInSnippet: boolean; // Boolean!
    showInSnippetTitle: boolean; // Boolean!
    showNameInCardTitle?: boolean | null; // Boolean
    showNameInSelectedAttributes?: boolean | null; // Boolean
    showNameInSnippetTitle?: boolean | null; // Boolean
    showNameInTitle?: boolean | null; // Boolean
    variant: NexusGenEnums['AttributeVariant']; // AttributeVariant!
    viewVariant: NexusGenEnums['AttributeViewVariant']; // AttributeViewVariant!
  };
  AddAttributesGroupToCategoryInput: {
    // input type
    attributesGroupId: NexusGenScalars['ObjectId']; // ObjectId!
    categoryId: NexusGenScalars['ObjectId']; // ObjectId!
  };
  AddAttributesGroupToRubricInput: {
    // input type
    attributesGroupId: NexusGenScalars['ObjectId']; // ObjectId!
    rubricId: NexusGenScalars['ObjectId']; // ObjectId!
  };
  AddCityToCountryInput: {
    // input type
    countryId: NexusGenScalars['ObjectId']; // ObjectId!
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
    slug: string; // String!
  };
  AddCollectionToBrandInput: {
    // input type
    brandId: NexusGenScalars['ObjectId']; // ObjectId!
    descriptionI18n?: NexusGenScalars['JSONObject'] | null; // JSONObject
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
    showAsBreadcrumb?: boolean | null; // Boolean
    showAsCatalogueBreadcrumb?: boolean | null; // Boolean
    showInCardTitle?: boolean | null; // Boolean
    showInCatalogueTitle?: boolean | null; // Boolean
    showInSnippetTitle?: boolean | null; // Boolean
  };
  AddOptionToGroupInput: {
    // input type
    color?: string | null; // String
    gender?: NexusGenEnums['Gender'] | null; // Gender
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
    optionsGroupId: NexusGenScalars['ObjectId']; // ObjectId!
    parentId?: NexusGenScalars['ObjectId'] | null; // ObjectId
    variants: NexusGenScalars['JSONObject']; // JSONObject!
  };
  AddProductToCartInput: {
    // input type
    amount: number; // Int!
    productId: NexusGenScalars['ObjectId']; // ObjectId!
    shopProductId: NexusGenScalars['ObjectId']; // ObjectId!
  };
  AddProductToConnectionInput: {
    // input type
    addProductId: NexusGenScalars['ObjectId']; // ObjectId!
    connectionId: NexusGenScalars['ObjectId']; // ObjectId!
    productId: NexusGenScalars['ObjectId']; // ObjectId!
  };
  AddProductToShopInput: {
    // input type
    available: number; // Int!
    price: number; // Int!
    productId: NexusGenScalars['ObjectId']; // ObjectId!
    shopId: NexusGenScalars['ObjectId']; // ObjectId!
  };
  AddShopProductSupplierInput: {
    // input type
    percent: number; // Int!
    price: number; // Int!
    shopProductId: NexusGenScalars['ObjectId']; // ObjectId!
    supplierId: NexusGenScalars['ObjectId']; // ObjectId!
    variant: NexusGenEnums['SupplierPriceVariant']; // SupplierPriceVariant!
  };
  AddShopToCartProductInput: {
    // input type
    cartProductId: NexusGenScalars['ObjectId']; // ObjectId!
    shopProductId: NexusGenScalars['ObjectId']; // ObjectId!
  };
  AddShopToCompanyInput: {
    // input type
    address: NexusGenInputs['AddressInput']; // AddressInput!
    citySlug: string; // String!
    companyId: NexusGenScalars['ObjectId']; // ObjectId!
    contacts: NexusGenInputs['ContactsInput']; // ContactsInput!
    license?: string | null; // String
    name: string; // String!
  };
  AddShoplessProductToCartInput: {
    // input type
    amount: number; // Int!
    productId: NexusGenScalars['ObjectId']; // ObjectId!
  };
  AddressInput: {
    // input type
    formattedAddress: string; // String!
    point: NexusGenInputs['CoordinatesInput']; // CoordinatesInput!
  };
  BrandAlphabetInput: {
    // input type
    slugs?: string[] | null; // [String!]
  };
  BrandCollectionAlphabetInput: {
    // input type
    brandId?: NexusGenScalars['ObjectId'] | null; // ObjectId
    brandSlug?: string | null; // String
    slugs?: string[] | null; // [String!]
  };
  CatalogueAdditionalOptionsInput: {
    // input type
    attributeSlug: string; // String!
    companyId?: NexusGenScalars['ObjectId'] | null; // ObjectId
    filter: string[]; // [String!]!
    isSearchResult?: boolean | null; // Boolean
    rubricSlug: string; // String!
  };
  CatalogueDataInput: {
    // input type
    companySlug: string | null; // String
    filter: string[]; // [String!]!
    rubricSlug: string; // String!
  };
  CategoryAlphabetInput: {
    // input type
    slugs?: string[] | null; // [String!]
  };
  ContactsInput: {
    // input type
    emails: NexusGenScalars['EmailAddress'][]; // [EmailAddress!]!
    phones: string[]; // [String!]!
  };
  CoordinatesInput: {
    // input type
    lat: number; // Float!
    lng: number; // Float!
  };
  CreateAttributesGroupInput: {
    // input type
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
  };
  CreateBrandInput: {
    // input type
    descriptionI18n?: NexusGenScalars['JSONObject'] | null; // JSONObject
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
    showAsBreadcrumb?: boolean | null; // Boolean
    showAsCatalogueBreadcrumb?: boolean | null; // Boolean
    showInCardTitle?: boolean | null; // Boolean
    showInCatalogueTitle?: boolean | null; // Boolean
    showInSnippetTitle?: boolean | null; // Boolean
    url?: NexusGenScalars['URL'][] | null; // [URL!]
  };
  CreateCategoryInput: {
    // input type
    gender?: NexusGenEnums['Gender'] | null; // Gender
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
    parentId?: NexusGenScalars['ObjectId'] | null; // ObjectId
    replaceParentNameInCatalogueTitle?: boolean | null; // Boolean
    rubricId: NexusGenScalars['ObjectId']; // ObjectId!
    variants: NexusGenScalars['JSONObject']; // JSONObject!
  };
  CreateCompanyInput: {
    // input type
    contacts: NexusGenInputs['ContactsInput']; // ContactsInput!
    domain?: string | null; // String
    name: string; // String!
    ownerId: NexusGenScalars['ObjectId']; // ObjectId!
    staffIds: NexusGenScalars['ObjectId'][]; // [ObjectId!]!
  };
  CreateCountryInput: {
    // input type
    currency: string; // String!
    name: string; // String!
  };
  CreateCurrencyInput: {
    // input type
    name: string; // String!
  };
  CreateLanguageInput: {
    // input type
    name: string; // String!
    nativeName: string; // String!
    slug: string; // String!
  };
  CreateManufacturerInput: {
    // input type
    descriptionI18n?: NexusGenScalars['JSONObject'] | null; // JSONObject
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
    url?: NexusGenScalars['URL'][] | null; // [URL!]
  };
  CreateMetricInput: {
    // input type
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
  };
  CreateNavItemInput: {
    // input type
    icon?: string | null; // String
    index: number; // Int!
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
    navGroup: string; // String!
    path: string; // String!
    slug: string; // String!
  };
  CreateOptionsGroupInput: {
    // input type
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
    variant: NexusGenEnums['OptionsGroupVariant']; // OptionsGroupVariant!
  };
  CreateOrderStatusInput: {
    // input type
    color: string; // String!
    index: number; // Int!
    isCancelationRequest: boolean; // Boolean!
    isCanceled: boolean; // Boolean!
    isConfirmed: boolean; // Boolean!
    isDone: boolean; // Boolean!
    isNew: boolean; // Boolean!
    isPayed: boolean; // Boolean!
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
  };
  CreateProductConnectionInput: {
    // input type
    attributeId: NexusGenScalars['ObjectId']; // ObjectId!
    productId: NexusGenScalars['ObjectId']; // ObjectId!
  };
  CreateRoleInput: {
    // input type
    descriptionI18n?: NexusGenScalars['JSONObject'] | null; // JSONObject
    isCompanyStaff: boolean; // Boolean!
    isStaff: boolean; // Boolean!
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
    showAdminUiInCatalogue: boolean; // Boolean!
  };
  CreateRubricInput: {
    // input type
    capitalise?: boolean | null; // Boolean
    defaultTitleI18n: NexusGenScalars['JSONObject']; // JSONObject!
    descriptionI18n: NexusGenScalars['JSONObject']; // JSONObject!
    gender: NexusGenEnums['Gender']; // Gender!
    keywordI18n: NexusGenScalars['JSONObject']; // JSONObject!
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
    prefixI18n?: NexusGenScalars['JSONObject'] | null; // JSONObject
    shortDescriptionI18n: NexusGenScalars['JSONObject']; // JSONObject!
    showBrandInFilter?: boolean | null; // Boolean
    showBrandInNav?: boolean | null; // Boolean
    showCategoryInProductTitle?: boolean | null; // Boolean
    showRubricNameInProductTitle?: boolean | null; // Boolean
    variantId: NexusGenScalars['ObjectId']; // ObjectId!
  };
  CreateRubricVariantInput: {
    // input type
    companySlug: string; // String!
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
  };
  CreateSupplierInput: {
    // input type
    descriptionI18n?: NexusGenScalars['JSONObject'] | null; // JSONObject
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
    url?: NexusGenScalars['URL'][] | null; // [URL!]
  };
  DeleteAttributeFromGroupInput: {
    // input type
    attributeId: NexusGenScalars['ObjectId']; // ObjectId!
    attributesGroupId: NexusGenScalars['ObjectId']; // ObjectId!
  };
  DeleteAttributesGroupFromCategoryInput: {
    // input type
    attributesGroupId: NexusGenScalars['ObjectId']; // ObjectId!
    categoryId: NexusGenScalars['ObjectId']; // ObjectId!
  };
  DeleteAttributesGroupFromRubricInput: {
    // input type
    attributesGroupId: NexusGenScalars['ObjectId']; // ObjectId!
    rubricId: NexusGenScalars['ObjectId']; // ObjectId!
  };
  DeleteCityFromCountryInput: {
    // input type
    cityId: NexusGenScalars['ObjectId']; // ObjectId!
    countryId: NexusGenScalars['ObjectId']; // ObjectId!
  };
  DeleteCollectionFromBrandInput: {
    // input type
    brandCollectionId: NexusGenScalars['ObjectId']; // ObjectId!
    brandId: NexusGenScalars['ObjectId']; // ObjectId!
  };
  DeleteOptionFromGroupInput: {
    // input type
    optionId: NexusGenScalars['ObjectId']; // ObjectId!
    optionsGroupId: NexusGenScalars['ObjectId']; // ObjectId!
  };
  DeleteProductFromCartInput: {
    // input type
    cartProductId: NexusGenScalars['ObjectId']; // ObjectId!
  };
  DeleteProductFromCategoryInput: {
    // input type
    categoryId: NexusGenScalars['ObjectId']; // ObjectId!
    productId: NexusGenScalars['ObjectId']; // ObjectId!
  };
  DeleteProductFromConnectionInput: {
    // input type
    connectionId: NexusGenScalars['ObjectId']; // ObjectId!
    deleteProductId: NexusGenScalars['ObjectId']; // ObjectId!
    productId: NexusGenScalars['ObjectId']; // ObjectId!
  };
  DeleteProductFromShopInput: {
    // input type
    shopId: NexusGenScalars['ObjectId']; // ObjectId!
    shopProductId: NexusGenScalars['ObjectId']; // ObjectId!
  };
  DeleteShopAssetInput: {
    // input type
    assetIndex: number; // Int!
    shopId: NexusGenScalars['ObjectId']; // ObjectId!
  };
  DeleteShopFromCompanyInput: {
    // input type
    companyId: NexusGenScalars['ObjectId']; // ObjectId!
    shopId: NexusGenScalars['ObjectId']; // ObjectId!
  };
  GetAllRubricsInput: {
    // input type
    excludedRubricsIds?: NexusGenScalars['ObjectId'][] | null; // [ObjectId!]
  };
  GetProductShopsInput: {
    // input type
    productId: NexusGenScalars['ObjectId']; // ObjectId!
    sortBy: string | null; // String
    sortDir: NexusGenEnums['SortDirection'] | null; // SortDirection
  };
  ManufacturerAlphabetInput: {
    // input type
    slugs?: string[] | null; // [String!]
  };
  MoveAttributeInput: {
    // input type
    attributeId: NexusGenScalars['ObjectId']; // ObjectId!
    attributesGroupId: NexusGenScalars['ObjectId']; // ObjectId!
  };
  MoveOptionInput: {
    // input type
    optionId: NexusGenScalars['ObjectId']; // ObjectId!
    optionsGroupId: NexusGenScalars['ObjectId']; // ObjectId!
  };
  OptionAlphabetInput: {
    // input type
    optionsGroupId: NexusGenScalars['ObjectId']; // ObjectId!
    parentId?: NexusGenScalars['ObjectId'] | null; // ObjectId
    slugs?: string[] | null; // [String!]
  };
  PaginationInput: {
    // input type
    limit: number | null; // Int
    page: number | null; // Int
    search?: string | null; // String
    sortBy: string | null; // String
    sortDir: NexusGenEnums['SortDirection'] | null; // SortDirection
  };
  ProductAttributesASTInput: {
    // input type
    productId?: NexusGenScalars['ObjectId'] | null; // ObjectId
    rubricId: NexusGenScalars['ObjectId']; // ObjectId!
  };
  ProductsPaginationInput: {
    // input type
    attributesIds?: NexusGenScalars['ObjectId'][] | null; // [ObjectId!]
    excludedOptionsSlugs?: string[] | null; // [String!]
    excludedProductsIds?: NexusGenScalars['ObjectId'][] | null; // [ObjectId!]
    excludedRubricsIds?: NexusGenScalars['ObjectId'][] | null; // [ObjectId!]
    isWithoutRubrics?: boolean | null; // Boolean
    limit: number | null; // Int
    maxPrice?: number | null; // Int
    minPrice?: number | null; // Int
    page: number | null; // Int
    rubricId?: NexusGenScalars['ObjectId'] | null; // ObjectId
    search?: string | null; // String
    sortBy: string | null; // String
    sortDir: NexusGenEnums['SortDirection'] | null; // SortDirection
  };
  RepeatOrderInput: {
    // input type
    orderId: NexusGenScalars['ObjectId']; // ObjectId!
  };
  RubricProductsCountersInput: {
    // input type
    attributesIds?: NexusGenScalars['ObjectId'][] | null; // [ObjectId!]
    excludedProductsIds?: NexusGenScalars['ObjectId'][] | null; // [ObjectId!]
  };
  SupplierAlphabetInput: {
    // input type
    slugs?: string[] | null; // [String!]
  };
  UpdateAttributeInCategoryInput: {
    // input type
    attributeId: NexusGenScalars['ObjectId']; // ObjectId!
    categoryId: NexusGenScalars['ObjectId']; // ObjectId!
  };
  UpdateAttributeInGroupInput: {
    // input type
    attributeId: NexusGenScalars['ObjectId']; // ObjectId!
    attributesGroupId: NexusGenScalars['ObjectId']; // ObjectId!
    capitalise?: boolean | null; // Boolean
    metricId?: NexusGenScalars['ObjectId'] | null; // ObjectId
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
    notShowAsAlphabet?: boolean | null; // Boolean
    optionsGroupId?: NexusGenScalars['ObjectId'] | null; // ObjectId
    positioningInCardTitle?: NexusGenScalars['JSONObject'] | null; // JSONObject
    positioningInTitle?: NexusGenScalars['JSONObject'] | null; // JSONObject
    showAsBreadcrumb: boolean; // Boolean!
    showAsCatalogueBreadcrumb: boolean; // Boolean!
    showInCard: boolean; // Boolean!
    showInCardTitle: boolean; // Boolean!
    showInCatalogueFilter: boolean; // Boolean!
    showInCatalogueNav: boolean; // Boolean!
    showInCatalogueTitle: boolean; // Boolean!
    showInSnippet: boolean; // Boolean!
    showInSnippetTitle: boolean; // Boolean!
    showNameInCardTitle?: boolean | null; // Boolean
    showNameInSelectedAttributes?: boolean | null; // Boolean
    showNameInSnippetTitle?: boolean | null; // Boolean
    showNameInTitle?: boolean | null; // Boolean
    variant: NexusGenEnums['AttributeVariant']; // AttributeVariant!
    viewVariant: NexusGenEnums['AttributeViewVariant']; // AttributeViewVariant!
  };
  UpdateAttributeInRubricInput: {
    // input type
    attributeId: NexusGenScalars['ObjectId']; // ObjectId!
    rubricId: NexusGenScalars['ObjectId']; // ObjectId!
  };
  UpdateAttributesGroupInput: {
    // input type
    attributesGroupId: NexusGenScalars['ObjectId']; // ObjectId!
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
  };
  UpdateBrandInput: {
    // input type
    brandId: NexusGenScalars['ObjectId']; // ObjectId!
    descriptionI18n?: NexusGenScalars['JSONObject'] | null; // JSONObject
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
    showAsBreadcrumb?: boolean | null; // Boolean
    showAsCatalogueBreadcrumb?: boolean | null; // Boolean
    showInCardTitle?: boolean | null; // Boolean
    showInCatalogueTitle?: boolean | null; // Boolean
    showInSnippetTitle?: boolean | null; // Boolean
    url?: NexusGenScalars['URL'][] | null; // [URL!]
  };
  UpdateCategoryInput: {
    // input type
    categoryId: NexusGenScalars['ObjectId']; // ObjectId!
    companySlug: string; // String!
    gender?: NexusGenEnums['Gender'] | null; // Gender
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
    replaceParentNameInCatalogueTitle?: boolean | null; // Boolean
    rubricId: NexusGenScalars['ObjectId']; // ObjectId!
    textBottom?: NexusGenScalars['JSONObject'] | null; // JSONObject
    textTop?: NexusGenScalars['JSONObject'] | null; // JSONObject
    variants: NexusGenScalars['JSONObject']; // JSONObject!
  };
  UpdateCityInCountryInput: {
    // input type
    cityId: NexusGenScalars['ObjectId']; // ObjectId!
    countryId: NexusGenScalars['ObjectId']; // ObjectId!
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
    slug: string; // String!
  };
  UpdateCollectionInBrandInput: {
    // input type
    brandCollectionId: NexusGenScalars['ObjectId']; // ObjectId!
    brandId: NexusGenScalars['ObjectId']; // ObjectId!
    descriptionI18n?: NexusGenScalars['JSONObject'] | null; // JSONObject
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
    showAsBreadcrumb?: boolean | null; // Boolean
    showAsCatalogueBreadcrumb?: boolean | null; // Boolean
    showInCardTitle?: boolean | null; // Boolean
    showInCatalogueTitle?: boolean | null; // Boolean
    showInSnippetTitle?: boolean | null; // Boolean
  };
  UpdateCompanyInput: {
    // input type
    companyId: NexusGenScalars['ObjectId']; // ObjectId!
    contacts: NexusGenInputs['ContactsInput']; // ContactsInput!
    domain?: string | null; // String
    name: string; // String!
    ownerId: NexusGenScalars['ObjectId']; // ObjectId!
    staffIds: NexusGenScalars['ObjectId'][]; // [ObjectId!]!
  };
  UpdateConfigInput: {
    // input type
    _id: NexusGenScalars['ObjectId']; // ObjectId!
    acceptedFormats: string[]; // [String!]!
    cities: NexusGenScalars['JSONObject']; // JSONObject!
    companySlug: string; // String!
    description?: string | null; // String
    group: string; // String!
    multi: boolean; // Boolean!
    name: string; // String!
    slug: string; // String!
    variant: NexusGenEnums['ConfigVariant']; // ConfigVariant!
  };
  UpdateCountryInput: {
    // input type
    countryId: NexusGenScalars['ObjectId']; // ObjectId!
    currency: string; // String!
    name: string; // String!
  };
  UpdateCurrencyInput: {
    // input type
    currencyId: NexusGenScalars['ObjectId']; // ObjectId!
    name: string; // String!
  };
  UpdateLanguageInput: {
    // input type
    languageId: NexusGenScalars['ObjectId']; // ObjectId!
    name: string; // String!
    nativeName: string; // String!
    slug: string; // String!
  };
  UpdateManufacturerInput: {
    // input type
    descriptionI18n?: NexusGenScalars['JSONObject'] | null; // JSONObject
    manufacturerId: NexusGenScalars['ObjectId']; // ObjectId!
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
    url?: NexusGenScalars['URL'][] | null; // [URL!]
  };
  UpdateMetricInput: {
    // input type
    metricId: NexusGenScalars['ObjectId']; // ObjectId!
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
  };
  UpdateNavItemInput: {
    // input type
    _id: NexusGenScalars['ObjectId']; // ObjectId!
    icon?: string | null; // String
    index: number; // Int!
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
    navGroup: string; // String!
    path: string; // String!
    slug: string; // String!
  };
  UpdateOptionInGroupInput: {
    // input type
    color?: string | null; // String
    gender?: NexusGenEnums['Gender'] | null; // Gender
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
    optionId: NexusGenScalars['ObjectId']; // ObjectId!
    optionsGroupId: NexusGenScalars['ObjectId']; // ObjectId!
    parentId?: NexusGenScalars['ObjectId'] | null; // ObjectId
    variants: NexusGenScalars['JSONObject']; // JSONObject!
  };
  UpdateOptionsGroupInput: {
    // input type
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
    optionsGroupId: NexusGenScalars['ObjectId']; // ObjectId!
    variant: NexusGenEnums['OptionsGroupVariant']; // OptionsGroupVariant!
  };
  UpdateOrderStatusInput: {
    // input type
    color: string; // String!
    index: number; // Int!
    isCancelationRequest: boolean; // Boolean!
    isCanceled: boolean; // Boolean!
    isConfirmed: boolean; // Boolean!
    isDone: boolean; // Boolean!
    isNew: boolean; // Boolean!
    isPayed: boolean; // Boolean!
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
    orderStatusId: NexusGenScalars['ObjectId']; // ObjectId!
  };
  UpdateProductBrandCollectionInput: {
    // input type
    brandCollectionSlug?: string | null; // String
    productId: NexusGenScalars['ObjectId']; // ObjectId!
  };
  UpdateProductBrandInput: {
    // input type
    brandSlug?: string | null; // String
    productId: NexusGenScalars['ObjectId']; // ObjectId!
  };
  UpdateProductCardContentInput: {
    // input type
    companySlug: string; // String!
    content: NexusGenScalars['JSONObject']; // JSONObject!
  };
  UpdateProductInCartInput: {
    // input type
    amount: number; // Int!
    cartProductId: NexusGenScalars['ObjectId']; // ObjectId!
  };
  UpdateProductManufacturerInput: {
    // input type
    manufacturerSlug?: string | null; // String
    productId: NexusGenScalars['ObjectId']; // ObjectId!
  };
  UpdateProductNumberAttributeInput: {
    // input type
    attributes: NexusGenInputs['UpdateProductNumberAttributeItemInput'][]; // [UpdateProductNumberAttributeItemInput!]!
    productId: NexusGenScalars['ObjectId']; // ObjectId!
  };
  UpdateProductNumberAttributeItemInput: {
    // input type
    attributeId: NexusGenScalars['ObjectId']; // ObjectId!
    number?: number | null; // Float
    productAttributeId: NexusGenScalars['ObjectId']; // ObjectId!
  };
  UpdateProductSelectAttributeInput: {
    // input type
    attributeId: NexusGenScalars['ObjectId']; // ObjectId!
    productAttributeId: NexusGenScalars['ObjectId']; // ObjectId!
    productId: NexusGenScalars['ObjectId']; // ObjectId!
    selectedOptionsIds: NexusGenScalars['ObjectId'][]; // [ObjectId!]!
  };
  UpdateProductTextAttributeInput: {
    // input type
    attributes: NexusGenInputs['UpdateProductTextAttributeItemInput'][]; // [UpdateProductTextAttributeItemInput!]!
    productId: NexusGenScalars['ObjectId']; // ObjectId!
  };
  UpdateProductTextAttributeItemInput: {
    // input type
    attributeId: NexusGenScalars['ObjectId']; // ObjectId!
    productAttributeId: NexusGenScalars['ObjectId']; // ObjectId!
    textI18n?: NexusGenScalars['JSONObject'] | null; // JSONObject
  };
  UpdateRoleInput: {
    // input type
    descriptionI18n?: NexusGenScalars['JSONObject'] | null; // JSONObject
    isCompanyStaff: boolean; // Boolean!
    isStaff: boolean; // Boolean!
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
    roleId: NexusGenScalars['ObjectId']; // ObjectId!
    showAdminUiInCatalogue: boolean; // Boolean!
  };
  UpdateRoleNavInput: {
    // input type
    checked: boolean; // Boolean!
    navItemId: NexusGenScalars['ObjectId']; // ObjectId!
    roleId: NexusGenScalars['ObjectId']; // ObjectId!
  };
  UpdateRoleRuleInput: {
    // input type
    _id: NexusGenScalars['ObjectId']; // ObjectId!
    allow: boolean; // Boolean!
    descriptionI18n?: NexusGenScalars['JSONObject'] | null; // JSONObject
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
    roleId: NexusGenScalars['ObjectId']; // ObjectId!
    slug: string; // String!
  };
  UpdateRubricInput: {
    // input type
    active: boolean; // Boolean!
    capitalise?: boolean | null; // Boolean
    companySlug: string; // String!
    defaultTitleI18n: NexusGenScalars['JSONObject']; // JSONObject!
    descriptionI18n: NexusGenScalars['JSONObject']; // JSONObject!
    gender: NexusGenEnums['Gender']; // Gender!
    keywordI18n: NexusGenScalars['JSONObject']; // JSONObject!
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
    prefixI18n?: NexusGenScalars['JSONObject'] | null; // JSONObject
    rubricId: NexusGenScalars['ObjectId']; // ObjectId!
    shortDescriptionI18n: NexusGenScalars['JSONObject']; // JSONObject!
    showBrandInFilter?: boolean | null; // Boolean
    showBrandInNav?: boolean | null; // Boolean
    showCategoryInProductTitle?: boolean | null; // Boolean
    showRubricNameInProductTitle?: boolean | null; // Boolean
    textBottom?: NexusGenScalars['JSONObject'] | null; // JSONObject
    textTop?: NexusGenScalars['JSONObject'] | null; // JSONObject
    variantId: NexusGenScalars['ObjectId']; // ObjectId!
  };
  UpdateRubricVariantInput: {
    // input type
    allowDelivery?: boolean | null; // Boolean
    cardBrandsLabelI18n?: NexusGenScalars['JSONObject'] | null; // JSONObject
    cardLayout?: string | null; // String
    catalogueFilterLayout?: string | null; // String
    catalogueHeadLayout?: string | null; // String
    catalogueNavLayout?: string | null; // String
    gridCatalogueColumns?: number | null; // Int
    gridSnippetLayout?: string | null; // String
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
    rowSnippetLayout?: string | null; // String
    rubricVariantId: NexusGenScalars['ObjectId']; // ObjectId!
    showCardArticle?: boolean | null; // Boolean
    showCardBrands?: boolean | null; // Boolean
    showCardButtonsBackground?: boolean | null; // Boolean
    showCardImagesSlider?: boolean | null; // Boolean
    showCatalogueFilterBrands?: boolean | null; // Boolean
    showCategoriesInFilter?: boolean | null; // Boolean
    showCategoriesInNav?: boolean | null; // Boolean
    showSnippetArticle?: boolean | null; // Boolean
    showSnippetBackground?: boolean | null; // Boolean
    showSnippetButtonsOnHover?: boolean | null; // Boolean
    showSnippetConnections?: boolean | null; // Boolean
    showSnippetRating?: boolean | null; // Boolean
  };
  UpdateShopAssetIndexInput: {
    // input type
    assetNewIndex: number; // Int!
    assetUrl: string; // String!
    shopId: NexusGenScalars['ObjectId']; // ObjectId!
  };
  UpdateShopInput: {
    // input type
    address: NexusGenInputs['AddressInput']; // AddressInput!
    citySlug: string; // String!
    contacts: NexusGenInputs['ContactsInput']; // ContactsInput!
    license?: string | null; // String
    name: string; // String!
    priceWarningI18n?: NexusGenScalars['JSONObject'] | null; // JSONObject
    shopId: NexusGenScalars['ObjectId']; // ObjectId!
  };
  UpdateShopProductSupplierInput: {
    // input type
    percent: number; // Int!
    price: number; // Int!
    supplierProductId: NexusGenScalars['ObjectId']; // ObjectId!
    variant: NexusGenEnums['SupplierPriceVariant']; // SupplierPriceVariant!
  };
  UpdateSupplierInput: {
    // input type
    descriptionI18n?: NexusGenScalars['JSONObject'] | null; // JSONObject
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
    supplierId: NexusGenScalars['ObjectId']; // ObjectId!
    url?: NexusGenScalars['URL'][] | null; // [URL!]
  };
  UpdateVisibleCategoriesInNavDropdownInput: {
    // input type
    _id: NexusGenScalars['ObjectId']; // ObjectId!
    acceptedFormats: string[]; // [String!]!
    categoryId: NexusGenScalars['ObjectId']; // ObjectId!
    cities: NexusGenScalars['JSONObject']; // JSONObject!
    citySlug: string; // String!
    companySlug: string; // String!
    description?: string | null; // String
    group: string; // String!
    multi: boolean; // Boolean!
    name: string; // String!
    rubricId: NexusGenScalars['ObjectId']; // ObjectId!
    slug: string; // String!
    variant: NexusGenEnums['ConfigVariant']; // ConfigVariant!
  };
}

export interface NexusGenEnums {
  AttributePositionInTitle: dbModels.AttributePositionInTitleModel;
  AttributeVariant: dbModels.AttributeVariantModel;
  AttributeViewVariant: dbModels.AttributeViewVariantModel;
  ConfigVariant: dbModels.ConfigVariantModel;
  Gender: dbModels.GenderModel;
  OptionsGroupVariant: dbModels.OptionsGroupVariantModel;
  OrderLogVariant: dbModels.OrderLogVariantModel;
  SortDirection: dbModels.SortDirectionModel;
  SupplierPriceVariant: dbModels.SupplierPriceVariantModel;
}

export interface NexusGenScalars {
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  Date: dbModels.DateModel;
  EmailAddress: dbModels.EmailAddressModel;
  JSONObject: dbModels.JSONObjectModel;
  ObjectId: dbModels.ObjectIdModel;
  PhoneNumber: dbModels.PhoneNumberModel;
  URL: dbModels.URLModel;
}

export interface NexusGenObjects {
  Address: dbModels.AddressModel;
  Asset: dbModels.AssetModel;
  Attribute: dbModels.AttributeModel;
  AttributesGroup: dbModels.AttributesGroupModel;
  AttributesGroupPayload: dbModels.AttributesGroupPayloadModel;
  Brand: dbModels.BrandModel;
  BrandCollection: dbModels.BrandCollectionModel;
  BrandCollectionsAlphabetList: dbModels.BrandCollectionsAlphabetListModel;
  BrandCollectionsPaginationPayload: dbModels.BrandCollectionsPaginationPayloadModel;
  BrandPayload: dbModels.BrandPayloadModel;
  BrandsAlphabetList: dbModels.BrandsAlphabetListModel;
  BrandsPaginationPayload: dbModels.BrandsPaginationPayloadModel;
  Cart: dbModels.CartModel;
  CartPayload: dbModels.CartPayloadModel;
  CartProduct: dbModels.CartProductModel;
  CategoriesAlphabetList: dbModels.CategoriesAlphabetListModel;
  Category: dbModels.CategoryModel;
  CategoryPayload: dbModels.CategoryPayloadModel;
  CitiesPaginationPayload: dbModels.CitiesPaginationPayloadModel;
  City: dbModels.CityModel;
  CompaniesPaginationPayload: dbModels.CompaniesPaginationPayloadModel;
  Company: dbModels.CompanyModel;
  CompanyPayload: dbModels.CompanyPayloadModel;
  Config: dbModels.ConfigModel;
  ConfigPayload: dbModels.ConfigPayloadModel;
  Contacts: dbModels.ContactsModel;
  Coordinates: dbModels.CoordinatesModel;
  Country: dbModels.CountryModel;
  CountryPayload: dbModels.CountryPayloadModel;
  Currency: dbModels.CurrencyModel;
  CurrencyPayload: dbModels.CurrencyPayloadModel;
  FormattedPhone: dbModels.FormattedPhoneModel;
  Language: dbModels.LanguageModel;
  LanguagePayload: dbModels.LanguagePayloadModel;
  Manufacturer: dbModels.ManufacturerModel;
  ManufacturerPayload: dbModels.ManufacturerPayloadModel;
  ManufacturersAlphabetList: dbModels.ManufacturersAlphabetListModel;
  ManufacturersPaginationPayload: dbModels.ManufacturersPaginationPayloadModel;
  MapMarker: dbModels.MapMarkerModel;
  Message: dbModels.MessageModel;
  MessagesGroup: dbModels.MessagesGroupModel;
  Metric: dbModels.MetricModel;
  MetricPayload: dbModels.MetricPayloadModel;
  Mutation: {};
  NavItem: dbModels.NavItemModel;
  NavItemPayload: dbModels.NavItemPayloadModel;
  Option: dbModels.OptionModel;
  OptionsAlphabetList: {
    // root type
    docs: NexusGenRootTypes['Option'][]; // [Option!]!
    letter: string; // String!
  };
  OptionsGroup: dbModels.OptionsGroupModel;
  OptionsGroupPayload: dbModels.OptionsGroupPayloadModel;
  Order: dbModels.OrderModel;
  OrderCustomer: dbModels.OrderCustomerModel;
  OrderLog: dbModels.OrderLogModel;
  OrderProduct: dbModels.OrderProductModel;
  OrderStatus: dbModels.OrderStatusModel;
  OrderStatusPayload: dbModels.OrderStatusPayloadModel;
  PointGeoJSON: dbModels.PointGeoJSONModel;
  Product: dbModels.ProductModel;
  ProductAssets: dbModels.ProductAssetsModel;
  ProductAttribute: dbModels.ProductAttributeModel;
  ProductCardPrices: dbModels.ProductCardPricesModel;
  ProductConnection: dbModels.ProductConnectionModel;
  ProductConnectionItem: dbModels.ProductConnectionItemModel;
  ProductPayload: dbModels.ProductPayloadModel;
  ProductsPaginationPayload: dbModels.ProductsPaginationPayloadModel;
  Query: {};
  Role: dbModels.RoleModel;
  RolePayload: dbModels.RolePayloadModel;
  RoleRule: dbModels.RoleRuleModel;
  RoleRulePayload: dbModels.RoleRulePayloadModel;
  Rubric: dbModels.RubricModel;
  RubricAttribute: {
    // root type
    _id: NexusGenScalars['ObjectId']; // ObjectId!
    metric?: NexusGenRootTypes['Metric'] | null; // Metric
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
    optionsGroupId?: NexusGenScalars['ObjectId'] | null; // ObjectId
    positioningInTitle?: NexusGenScalars['JSONObject'] | null; // JSONObject
    priorities: NexusGenScalars['JSONObject']; // JSONObject!
    showInCatalogueFilter: boolean; // Boolean!
    showInCatalogueNav: boolean; // Boolean!
    slug?: string | null; // String
    variant: NexusGenEnums['AttributeVariant']; // AttributeVariant!
    viewVariant: NexusGenEnums['AttributeViewVariant']; // AttributeViewVariant!
    views: NexusGenScalars['JSONObject']; // JSONObject!
  };
  RubricAttributesGroup: {
    // root type
    _id: NexusGenScalars['ObjectId']; // ObjectId!
    attributesIds: NexusGenScalars['ObjectId'][]; // [ObjectId!]!
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
  };
  RubricOption: {
    // root type
    _id: NexusGenScalars['ObjectId']; // ObjectId!
    color?: string | null; // String
    icon?: string | null; // String
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
    priorities: NexusGenScalars['JSONObject']; // JSONObject!
    slug: string; // String!
    variants: NexusGenScalars['JSONObject']; // JSONObject!
    views: NexusGenScalars['JSONObject']; // JSONObject!
  };
  RubricPayload: dbModels.RubricPayloadModel;
  RubricVariant: dbModels.RubricVariantModel;
  RubricVariantPayload: dbModels.RubricVariantPayloadModel;
  SelectOption: dbModels.SelectOptionModel;
  Shop: dbModels.ShopModel;
  ShopPayload: dbModels.ShopPayloadModel;
  ShopProduct: dbModels.ShopProductModel;
  ShopProductOldPrice: dbModels.ShopProductOldPriceModel;
  ShopProductPayload: dbModels.ShopProductPayloadModel;
  ShopProductsPaginationPayload: dbModels.ShopProductsPaginationPayloadModel;
  ShopsPaginationPayload: dbModels.ShopsPaginationPayloadModel;
  Supplier: dbModels.SupplierModel;
  SupplierPayload: dbModels.SupplierPayloadModel;
  SuppliersAlphabetList: dbModels.SuppliersAlphabetListModel;
  SuppliersPaginationPayload: dbModels.SuppliersPaginationPayloadModel;
  User: dbModels.UserModel;
}

export interface NexusGenInterfaces {
  AlphabetList: dbModels.AlphabetListModel;
  Base: dbModels.BaseModel;
  PaginationPayload: dbModels.PaginationPayloadModel;
  Payload: dbModels.PayloadModel;
  Timestamp: dbModels.TimestampModel;
}

export interface NexusGenUnions {}

export type NexusGenRootTypes = NexusGenInterfaces & NexusGenObjects;

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums;

export interface NexusGenFieldTypes {
  Address: {
    // field return type
    formattedAddress: string; // String!
    formattedCoordinates: NexusGenRootTypes['Coordinates']; // Coordinates!
    point: NexusGenRootTypes['PointGeoJSON']; // PointGeoJSON!
  };
  Asset: {
    // field return type
    index: number; // Int!
    url: string; // String!
  };
  Attribute: {
    // field return type
    _id: NexusGenScalars['ObjectId']; // ObjectId!
    capitalise: boolean | null; // Boolean
    metric: NexusGenRootTypes['Metric'] | null; // Metric
    name: string; // String!
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
    notShowAsAlphabet: boolean | null; // Boolean
    optionsGroup: NexusGenRootTypes['OptionsGroup'] | null; // OptionsGroup
    optionsGroupId: NexusGenScalars['ObjectId'] | null; // ObjectId
    positioningInTitle: NexusGenScalars['JSONObject'] | null; // JSONObject
    slug: string | null; // String
    variant: NexusGenEnums['AttributeVariant']; // AttributeVariant!
    viewVariant: NexusGenEnums['AttributeViewVariant']; // AttributeViewVariant!
  };
  AttributesGroup: {
    // field return type
    _id: NexusGenScalars['ObjectId']; // ObjectId!
    attributes: NexusGenRootTypes['Attribute'][]; // [Attribute!]!
    attributesIds: NexusGenScalars['ObjectId'][]; // [ObjectId!]!
    name: string; // String!
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
  };
  AttributesGroupPayload: {
    // field return type
    message: string; // String!
    payload: NexusGenRootTypes['AttributesGroup'] | null; // AttributesGroup
    success: boolean; // Boolean!
  };
  Brand: {
    // field return type
    _id: NexusGenScalars['ObjectId']; // ObjectId!
    collections: NexusGenRootTypes['BrandCollectionsPaginationPayload']; // BrandCollectionsPaginationPayload!
    collectionsList: NexusGenRootTypes['BrandCollection'][]; // [BrandCollection!]!
    createdAt: NexusGenScalars['Date']; // Date!
    description: string | null; // String
    descriptionI18n: NexusGenScalars['JSONObject'] | null; // JSONObject
    itemId: string; // String!
    name: string; // String!
    nameI18n: string; // String!
    updatedAt: NexusGenScalars['Date']; // Date!
    url: NexusGenScalars['URL'][] | null; // [URL!]
  };
  BrandCollection: {
    // field return type
    _id: NexusGenScalars['ObjectId']; // ObjectId!
    createdAt: NexusGenScalars['Date']; // Date!
    description: string | null; // String
    descriptionI18n: NexusGenScalars['JSONObject'] | null; // JSONObject
    itemId: string; // String!
    name: string; // String!
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
    updatedAt: NexusGenScalars['Date']; // Date!
  };
  BrandCollectionsAlphabetList: {
    // field return type
    docs: NexusGenRootTypes['BrandCollection'][]; // [BrandCollection!]!
    letter: string; // String!
  };
  BrandCollectionsPaginationPayload: {
    // field return type
    docs: NexusGenRootTypes['BrandCollection'][]; // [BrandCollection!]!
    hasNextPage: boolean; // Boolean!
    hasPrevPage: boolean; // Boolean!
    limit: number; // Int!
    page: number; // Int!
    sortBy: string; // String!
    sortDir: NexusGenEnums['SortDirection']; // SortDirection!
    totalActiveDocs: number; // Int!
    totalDocs: number; // Int!
    totalPages: number; // Int!
  };
  BrandPayload: {
    // field return type
    message: string; // String!
    payload: NexusGenRootTypes['Brand'] | null; // Brand
    success: boolean; // Boolean!
  };
  BrandsAlphabetList: {
    // field return type
    docs: NexusGenRootTypes['Brand'][]; // [Brand!]!
    letter: string; // String!
  };
  BrandsPaginationPayload: {
    // field return type
    docs: NexusGenRootTypes['Brand'][]; // [Brand!]!
    hasNextPage: boolean; // Boolean!
    hasPrevPage: boolean; // Boolean!
    limit: number; // Int!
    page: number; // Int!
    sortBy: string; // String!
    sortDir: NexusGenEnums['SortDirection']; // SortDirection!
    totalActiveDocs: number; // Int!
    totalDocs: number; // Int!
    totalPages: number; // Int!
  };
  Cart: {
    // field return type
    _id: NexusGenScalars['ObjectId']; // ObjectId!
    cartBookingProducts: NexusGenRootTypes['CartProduct'][]; // [CartProduct!]!
    cartDeliveryProducts: NexusGenRootTypes['CartProduct'][]; // [CartProduct!]!
  };
  CartPayload: {
    // field return type
    message: string; // String!
    success: boolean; // Boolean!
  };
  CartProduct: {
    // field return type
    _id: NexusGenScalars['ObjectId']; // ObjectId!
    amount: number; // Int!
    itemId: string; // String!
    productId: NexusGenScalars['ObjectId'] | null; // ObjectId
    shopProductId: NexusGenScalars['ObjectId'] | null; // ObjectId
  };
  CategoriesAlphabetList: {
    // field return type
    docs: NexusGenRootTypes['Category'][]; // [Category!]!
    letter: string; // String!
  };
  Category: {
    // field return type
    _id: NexusGenScalars['ObjectId']; // ObjectId!
    categories: NexusGenRootTypes['Category'][]; // [Category!]!
    image: string | null; // String
    name: string; // String!
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
    parentId: NexusGenScalars['ObjectId'] | null; // ObjectId
    priorities: NexusGenScalars['JSONObject']; // JSONObject!
    replaceParentNameInCatalogueTitle: boolean | null; // Boolean
    rubricId: NexusGenScalars['ObjectId']; // ObjectId!
    slug: string; // String!
    views: NexusGenScalars['JSONObject']; // JSONObject!
  };
  CategoryPayload: {
    // field return type
    message: string; // String!
    payload: NexusGenRootTypes['Category'] | null; // Category
    success: boolean; // Boolean!
  };
  CitiesPaginationPayload: {
    // field return type
    docs: NexusGenRootTypes['City'][]; // [City!]!
    hasNextPage: boolean; // Boolean!
    hasPrevPage: boolean; // Boolean!
    limit: number; // Int!
    page: number; // Int!
    sortBy: string; // String!
    sortDir: NexusGenEnums['SortDirection']; // SortDirection!
    totalActiveDocs: number; // Int!
    totalDocs: number; // Int!
    totalPages: number; // Int!
  };
  City: {
    // field return type
    _id: NexusGenScalars['ObjectId']; // ObjectId!
    name: string; // String!
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
    slug: string; // String!
  };
  CompaniesPaginationPayload: {
    // field return type
    docs: NexusGenRootTypes['Company'][]; // [Company!]!
    hasNextPage: boolean; // Boolean!
    hasPrevPage: boolean; // Boolean!
    limit: number; // Int!
    page: number; // Int!
    sortBy: string; // String!
    sortDir: NexusGenEnums['SortDirection']; // SortDirection!
    totalActiveDocs: number; // Int!
    totalDocs: number; // Int!
    totalPages: number; // Int!
  };
  Company: {
    // field return type
    _id: NexusGenScalars['ObjectId']; // ObjectId!
    contacts: NexusGenRootTypes['Contacts']; // Contacts!
    createdAt: NexusGenScalars['Date']; // Date!
    domain: string | null; // String
    itemId: string; // String!
    logo: NexusGenRootTypes['Asset']; // Asset!
    name: string; // String!
    owner: NexusGenRootTypes['User']; // User!
    ownerId: NexusGenScalars['ObjectId']; // ObjectId!
    shops: NexusGenRootTypes['ShopsPaginationPayload']; // ShopsPaginationPayload!
    shopsIds: NexusGenScalars['ObjectId'][]; // [ObjectId!]!
    slug: string; // String!
    staff: NexusGenRootTypes['User'][]; // [User!]!
    staffIds: NexusGenScalars['ObjectId'][]; // [ObjectId!]!
    updatedAt: NexusGenScalars['Date']; // Date!
  };
  CompanyPayload: {
    // field return type
    message: string; // String!
    payload: NexusGenRootTypes['Company'] | null; // Company
    success: boolean; // Boolean!
  };
  Config: {
    // field return type
    _id: NexusGenScalars['ObjectId']; // ObjectId!
    acceptedFormats: string[]; // [String!]!
    cities: NexusGenScalars['JSONObject']; // JSONObject!
    companySlug: string; // String!
    description: string | null; // String
    group: string; // String!
    multi: boolean; // Boolean!
    name: string; // String!
    singleValue: string; // String!
    slug: string; // String!
    value: string[]; // [String!]!
    variant: NexusGenEnums['ConfigVariant'] | null; // ConfigVariant
  };
  ConfigPayload: {
    // field return type
    message: string; // String!
    payload: NexusGenRootTypes['Config'] | null; // Config
    success: boolean; // Boolean!
  };
  Contacts: {
    // field return type
    emails: NexusGenScalars['EmailAddress'][]; // [EmailAddress!]!
    formattedPhones: NexusGenRootTypes['FormattedPhone'][]; // [FormattedPhone!]!
    phones: string[]; // [String!]!
  };
  Coordinates: {
    // field return type
    lat: number; // Float!
    lng: number; // Float!
  };
  Country: {
    // field return type
    _id: NexusGenScalars['ObjectId']; // ObjectId!
    cities: NexusGenRootTypes['City'][]; // [City!]!
    currency: string; // String!
    name: string; // String!
  };
  CountryPayload: {
    // field return type
    message: string; // String!
    payload: NexusGenRootTypes['Country'] | null; // Country
    success: boolean; // Boolean!
  };
  Currency: {
    // field return type
    _id: NexusGenScalars['ObjectId']; // ObjectId!
    name: string; // String!
  };
  CurrencyPayload: {
    // field return type
    message: string; // String!
    payload: NexusGenRootTypes['Currency'] | null; // Currency
    success: boolean; // Boolean!
  };
  FormattedPhone: {
    // field return type
    raw: string; // String!
    readable: string; // String!
  };
  Language: {
    // field return type
    _id: NexusGenScalars['ObjectId']; // ObjectId!
    name: string; // String!
    nativeName: string; // String!
    slug: string; // String!
  };
  LanguagePayload: {
    // field return type
    message: string; // String!
    payload: NexusGenRootTypes['Language'] | null; // Language
    success: boolean; // Boolean!
  };
  Manufacturer: {
    // field return type
    _id: NexusGenScalars['ObjectId']; // ObjectId!
    createdAt: NexusGenScalars['Date']; // Date!
    description: string | null; // String
    descriptionI18n: NexusGenScalars['JSONObject'] | null; // JSONObject
    itemId: string; // String!
    name: string; // String!
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
    updatedAt: NexusGenScalars['Date']; // Date!
    url: NexusGenScalars['URL'][] | null; // [URL!]
  };
  ManufacturerPayload: {
    // field return type
    message: string; // String!
    payload: NexusGenRootTypes['Manufacturer'] | null; // Manufacturer
    success: boolean; // Boolean!
  };
  ManufacturersAlphabetList: {
    // field return type
    docs: NexusGenRootTypes['Manufacturer'][]; // [Manufacturer!]!
    letter: string; // String!
  };
  ManufacturersPaginationPayload: {
    // field return type
    docs: NexusGenRootTypes['Manufacturer'][]; // [Manufacturer!]!
    hasNextPage: boolean; // Boolean!
    hasPrevPage: boolean; // Boolean!
    limit: number; // Int!
    page: number; // Int!
    sortBy: string; // String!
    sortDir: NexusGenEnums['SortDirection']; // SortDirection!
    totalActiveDocs: number; // Int!
    totalDocs: number; // Int!
    totalPages: number; // Int!
  };
  MapMarker: {
    // field return type
    darkTheme: string | null; // String
    lightTheme: string | null; // String
  };
  Message: {
    // field return type
    _id: NexusGenScalars['ObjectId']; // ObjectId!
    message: string; // String!
    messageI18n: NexusGenScalars['JSONObject']; // JSONObject!
    slug: string; // String!
  };
  MessagesGroup: {
    // field return type
    _id: NexusGenScalars['ObjectId']; // ObjectId!
    messages: NexusGenRootTypes['Message'][]; // [Message!]!
    name: string; // String!
  };
  Metric: {
    // field return type
    _id: NexusGenScalars['ObjectId']; // ObjectId!
    name: string; // String!
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
  };
  MetricPayload: {
    // field return type
    message: string; // String!
    payload: NexusGenRootTypes['Metric'] | null; // Metric
    success: boolean; // Boolean!
  };
  Mutation: {
    // field return type
    addAttributeToGroup: NexusGenRootTypes['AttributesGroupPayload']; // AttributesGroupPayload!
    addAttributesGroupToCategory: NexusGenRootTypes['CategoryPayload']; // CategoryPayload!
    addAttributesGroupToRubric: NexusGenRootTypes['RubricPayload']; // RubricPayload!
    addCityToCountry: NexusGenRootTypes['CountryPayload']; // CountryPayload!
    addCollectionToBrand: NexusGenRootTypes['BrandPayload']; // BrandPayload!
    addManyProductsToShop: NexusGenRootTypes['ShopPayload']; // ShopPayload!
    addOptionToGroup: NexusGenRootTypes['OptionsGroupPayload']; // OptionsGroupPayload!
    addProductToCart: NexusGenRootTypes['CartPayload']; // CartPayload!
    addProductToConnection: NexusGenRootTypes['ProductPayload']; // ProductPayload!
    addShopProductSupplier: NexusGenRootTypes['ShopProductPayload']; // ShopProductPayload!
    addShopToCartProduct: NexusGenRootTypes['CartPayload']; // CartPayload!
    addShopToCompany: NexusGenRootTypes['CompanyPayload']; // CompanyPayload!
    addShoplessProductToCart: NexusGenRootTypes['CartPayload']; // CartPayload!
    clearCart: NexusGenRootTypes['CartPayload']; // CartPayload!
    createAttributesGroup: NexusGenRootTypes['AttributesGroupPayload']; // AttributesGroupPayload!
    createBrand: NexusGenRootTypes['BrandPayload']; // BrandPayload!
    createCategory: NexusGenRootTypes['CategoryPayload']; // CategoryPayload!
    createCompany: NexusGenRootTypes['CompanyPayload']; // CompanyPayload!
    createCountry: NexusGenRootTypes['CountryPayload']; // CountryPayload!
    createCurrency: NexusGenRootTypes['CurrencyPayload']; // CurrencyPayload!
    createLanguage: NexusGenRootTypes['LanguagePayload']; // LanguagePayload!
    createManufacturer: NexusGenRootTypes['ManufacturerPayload']; // ManufacturerPayload!
    createMetric: NexusGenRootTypes['MetricPayload']; // MetricPayload!
    createNavItem: NexusGenRootTypes['NavItemPayload']; // NavItemPayload!
    createOptionsGroup: NexusGenRootTypes['OptionsGroupPayload']; // OptionsGroupPayload!
    createOrderStatus: NexusGenRootTypes['OrderStatusPayload']; // OrderStatusPayload!
    createProductConnection: NexusGenRootTypes['ProductPayload']; // ProductPayload!
    createRole: NexusGenRootTypes['RolePayload']; // RolePayload!
    createRubric: NexusGenRootTypes['RubricPayload']; // RubricPayload!
    createRubricVariant: NexusGenRootTypes['RubricVariantPayload']; // RubricVariantPayload!
    createSupplier: NexusGenRootTypes['SupplierPayload']; // SupplierPayload!
    deleteAttributeFromGroup: NexusGenRootTypes['AttributesGroupPayload']; // AttributesGroupPayload!
    deleteAttributesGroup: NexusGenRootTypes['AttributesGroupPayload']; // AttributesGroupPayload!
    deleteAttributesGroupFromCategory: NexusGenRootTypes['CategoryPayload']; // CategoryPayload!
    deleteAttributesGroupFromRubric: NexusGenRootTypes['RubricPayload']; // RubricPayload!
    deleteBrand: NexusGenRootTypes['BrandPayload']; // BrandPayload!
    deleteCategory: NexusGenRootTypes['CategoryPayload']; // CategoryPayload!
    deleteCityFromCountry: NexusGenRootTypes['CountryPayload']; // CountryPayload!
    deleteCollectionFromBrand: NexusGenRootTypes['BrandPayload']; // BrandPayload!
    deleteCompany: NexusGenRootTypes['CompanyPayload']; // CompanyPayload!
    deleteCountry: NexusGenRootTypes['CountryPayload']; // CountryPayload!
    deleteCurrency: NexusGenRootTypes['CurrencyPayload']; // CurrencyPayload!
    deleteLanguage: NexusGenRootTypes['LanguagePayload']; // LanguagePayload!
    deleteManufacturer: NexusGenRootTypes['ManufacturerPayload']; // ManufacturerPayload!
    deleteMetric: NexusGenRootTypes['MetricPayload']; // MetricPayload!
    deleteNavItem: NexusGenRootTypes['NavItemPayload']; // NavItemPayload!
    deleteOptionFromGroup: NexusGenRootTypes['OptionsGroupPayload']; // OptionsGroupPayload!
    deleteOptionsGroup: NexusGenRootTypes['OptionsGroupPayload']; // OptionsGroupPayload!
    deleteOrderStatus: NexusGenRootTypes['OrderStatusPayload']; // OrderStatusPayload!
    deleteProductFromCart: NexusGenRootTypes['CartPayload']; // CartPayload!
    deleteProductFromConnection: NexusGenRootTypes['ProductPayload']; // ProductPayload!
    deleteProductFromShop: NexusGenRootTypes['ShopPayload']; // ShopPayload!
    deleteRole: NexusGenRootTypes['RolePayload']; // RolePayload!
    deleteRubric: NexusGenRootTypes['RubricPayload']; // RubricPayload!
    deleteRubricVariant: NexusGenRootTypes['RubricVariantPayload']; // RubricVariantPayload!
    deleteShopAsset: NexusGenRootTypes['ShopPayload']; // ShopPayload!
    deleteShopFromCompany: NexusGenRootTypes['CompanyPayload']; // CompanyPayload!
    deleteShopProductSupplier: NexusGenRootTypes['ShopProductPayload']; // ShopProductPayload!
    deleteSupplier: NexusGenRootTypes['SupplierPayload']; // SupplierPayload!
    generateShopToken: NexusGenRootTypes['ShopPayload']; // ShopPayload!
    moveAttribute: NexusGenRootTypes['AttributesGroupPayload']; // AttributesGroupPayload!
    moveOption: NexusGenRootTypes['OptionsGroupPayload']; // OptionsGroupPayload!
    repeatOrder: NexusGenRootTypes['CartPayload']; // CartPayload!
    updateAttributeInGroup: NexusGenRootTypes['AttributesGroupPayload']; // AttributesGroupPayload!
    updateAttributeInRubric: NexusGenRootTypes['RubricPayload']; // RubricPayload!
    updateAttributesGroup: NexusGenRootTypes['AttributesGroupPayload']; // AttributesGroupPayload!
    updateBrand: NexusGenRootTypes['BrandPayload']; // BrandPayload!
    updateCatalogueCounters: boolean; // Boolean!
    updateCategory: NexusGenRootTypes['CategoryPayload']; // CategoryPayload!
    updateCityInCountry: NexusGenRootTypes['CountryPayload']; // CountryPayload!
    updateCollectionInBrand: NexusGenRootTypes['BrandPayload']; // BrandPayload!
    updateCompany: NexusGenRootTypes['CompanyPayload']; // CompanyPayload!
    updateConfig: NexusGenRootTypes['ConfigPayload']; // ConfigPayload!
    updateCountry: NexusGenRootTypes['CountryPayload']; // CountryPayload!
    updateCurrency: NexusGenRootTypes['CurrencyPayload']; // CurrencyPayload!
    updateLanguage: NexusGenRootTypes['LanguagePayload']; // LanguagePayload!
    updateManufacturer: NexusGenRootTypes['ManufacturerPayload']; // ManufacturerPayload!
    updateMetric: NexusGenRootTypes['MetricPayload']; // MetricPayload!
    updateNavItem: NexusGenRootTypes['NavItemPayload']; // NavItemPayload!
    updateOptionInGroup: NexusGenRootTypes['OptionsGroupPayload']; // OptionsGroupPayload!
    updateOptionsGroup: NexusGenRootTypes['OptionsGroupPayload']; // OptionsGroupPayload!
    updateOrderStatus: NexusGenRootTypes['OrderStatusPayload']; // OrderStatusPayload!
    updateProductBrand: NexusGenRootTypes['ProductPayload']; // ProductPayload!
    updateProductBrandCollection: NexusGenRootTypes['ProductPayload']; // ProductPayload!
    updateProductCardContent: NexusGenRootTypes['ProductPayload']; // ProductPayload!
    updateProductInCart: NexusGenRootTypes['CartPayload']; // CartPayload!
    updateProductManufacturer: NexusGenRootTypes['ProductPayload']; // ProductPayload!
    updateProductNumberAttribute: NexusGenRootTypes['ProductPayload']; // ProductPayload!
    updateProductSelectAttribute: NexusGenRootTypes['ProductPayload']; // ProductPayload!
    updateProductTextAttribute: NexusGenRootTypes['ProductPayload']; // ProductPayload!
    updateRole: NexusGenRootTypes['RolePayload']; // RolePayload!
    updateRoleNav: NexusGenRootTypes['RolePayload']; // RolePayload!
    updateRoleRule: NexusGenRootTypes['RoleRulePayload']; // RoleRulePayload!
    updateRubric: NexusGenRootTypes['RubricPayload']; // RubricPayload!
    updateRubricVariant: NexusGenRootTypes['RubricVariantPayload']; // RubricVariantPayload!
    updateShop: NexusGenRootTypes['ShopPayload']; // ShopPayload!
    updateShopAssetIndex: NexusGenRootTypes['ShopPayload']; // ShopPayload!
    updateShopProductSupplier: NexusGenRootTypes['ShopProductPayload']; // ShopProductPayload!
    updateSupplier: NexusGenRootTypes['SupplierPayload']; // SupplierPayload!
    updateVisibleCategoriesInNavDropdown: NexusGenRootTypes['ConfigPayload']; // ConfigPayload!
  };
  NavItem: {
    // field return type
    _id: NexusGenScalars['ObjectId']; // ObjectId!
    children: NexusGenRootTypes['NavItem'][]; // [NavItem!]!
    icon: string | null; // String
    index: number; // Int!
    name: string; // String!
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
    navGroup: string; // String!
    parentId: NexusGenScalars['ObjectId'] | null; // ObjectId
    path: string; // String!
    slug: string; // String!
  };
  NavItemPayload: {
    // field return type
    message: string; // String!
    payload: NexusGenRootTypes['NavItem'] | null; // NavItem
    success: boolean; // Boolean!
  };
  Option: {
    // field return type
    _id: NexusGenScalars['ObjectId']; // ObjectId!
    color: string | null; // String
    gender: NexusGenEnums['Gender'] | null; // Gender
    image: string | null; // String
    name: string; // String!
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
    options: NexusGenRootTypes['Option'][] | null; // [Option!]
    slug: string; // String!
    variants: NexusGenScalars['JSONObject']; // JSONObject!
  };
  OptionsAlphabetList: {
    // field return type
    docs: NexusGenRootTypes['Option'][]; // [Option!]!
    letter: string; // String!
  };
  OptionsGroup: {
    // field return type
    _id: NexusGenScalars['ObjectId']; // ObjectId!
    name: string; // String!
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
    options: NexusGenRootTypes['Option'][]; // [Option!]!
    variant: NexusGenEnums['OptionsGroupVariant']; // OptionsGroupVariant!
  };
  OptionsGroupPayload: {
    // field return type
    message: string; // String!
    payload: NexusGenRootTypes['OptionsGroup'] | null; // OptionsGroup
    success: boolean; // Boolean!
  };
  Order: {
    // field return type
    _id: NexusGenScalars['ObjectId']; // ObjectId!
    comment: string | null; // String
    createdAt: NexusGenScalars['Date']; // Date!
    itemId: string; // String!
    statusId: NexusGenScalars['ObjectId']; // ObjectId!
    updatedAt: NexusGenScalars['Date']; // Date!
  };
  OrderCustomer: {
    // field return type
    _id: NexusGenScalars['ObjectId']; // ObjectId!
    email: NexusGenScalars['EmailAddress']; // EmailAddress!
    formattedPhone: NexusGenRootTypes['FormattedPhone']; // FormattedPhone!
    fullName: string; // String!
    itemId: number; // Int!
    lastName: string | null; // String
    name: string; // String!
    phone: string; // String!
    secondName: string | null; // String
    shortName: string; // String!
    user: NexusGenRootTypes['User'] | null; // User
    userId: NexusGenScalars['ObjectId']; // ObjectId!
  };
  OrderLog: {
    // field return type
    _id: NexusGenScalars['ObjectId']; // ObjectId!
    createdAt: NexusGenScalars['Date']; // Date!
    updatedAt: NexusGenScalars['Date']; // Date!
    user: NexusGenRootTypes['User'] | null; // User
    userId: NexusGenScalars['ObjectId']; // ObjectId!
    variant: NexusGenEnums['OrderLogVariant']; // OrderLogVariant!
  };
  OrderProduct: {
    // field return type
    _id: NexusGenScalars['ObjectId']; // ObjectId!
    amount: number; // Int!
    companyId: NexusGenScalars['ObjectId']; // ObjectId!
    formattedPrice: string; // String!
    formattedTotalPrice: string; // String!
    itemId: number; // Int!
    nameI18n: NexusGenScalars['JSONObject'] | null; // JSONObject
    originalName: string; // String!
    price: number; // Int!
    product: NexusGenRootTypes['Product'] | null; // Product
    productId: NexusGenScalars['ObjectId']; // ObjectId!
    shop: NexusGenRootTypes['Shop'] | null; // Shop
    shopId: NexusGenScalars['ObjectId']; // ObjectId!
    shopProduct: NexusGenRootTypes['ShopProduct'] | null; // ShopProduct
    shopProductId: NexusGenScalars['ObjectId']; // ObjectId!
    slug: string; // String!
    totalPrice: number; // Int!
  };
  OrderStatus: {
    // field return type
    _id: NexusGenScalars['ObjectId']; // ObjectId!
    color: string; // String!
    createdAt: NexusGenScalars['Date']; // Date!
    index: number; // Int!
    name: string; // String!
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
    slug: string; // String!
    updatedAt: NexusGenScalars['Date']; // Date!
  };
  OrderStatusPayload: {
    // field return type
    message: string; // String!
    payload: NexusGenRootTypes['OrderStatus'] | null; // OrderStatus
    success: boolean; // Boolean!
  };
  PointGeoJSON: {
    // field return type
    coordinates: number[]; // [Float!]!
    type: string; // String!
  };
  Product: {
    // field return type
    _id: NexusGenScalars['ObjectId']; // ObjectId!
    active: boolean; // Boolean!
    assets: NexusGenRootTypes['ProductAssets'] | null; // ProductAssets
    attributes: NexusGenRootTypes['ProductAttribute'][]; // [ProductAttribute!]!
    available: boolean | null; // Boolean
    barcode: string | null; // String
    brand: NexusGenRootTypes['Brand'] | null; // Brand
    brandCollection: NexusGenRootTypes['BrandCollection'] | null; // BrandCollection
    brandCollectionSlug: string | null; // String
    brandSlug: string | null; // String
    cardPrices: NexusGenRootTypes['ProductCardPrices']; // ProductCardPrices!
    connections: NexusGenRootTypes['ProductConnection'][]; // [ProductConnection!]!
    createdAt: NexusGenScalars['Date']; // Date!
    description: string | null; // String
    descriptionI18n: NexusGenScalars['JSONObject'] | null; // JSONObject
    itemId: string; // String!
    mainImage: string; // String!
    manufacturer: NexusGenRootTypes['Manufacturer'] | null; // Manufacturer
    manufacturerSlug: string | null; // String
    nameI18n: NexusGenScalars['JSONObject'] | null; // JSONObject
    originalName: string; // String!
    rubric: NexusGenRootTypes['Rubric']; // Rubric!
    rubricId: NexusGenScalars['ObjectId']; // ObjectId!
    rubricSlug: string; // String!
    shopProducts: NexusGenRootTypes['ShopProduct'][]; // [ShopProduct!]!
    shopsCount: number; // Int!
    slug: string; // String!
    snippetTitle: string; // String!
    supplierSlug: string | null; // String
    updatedAt: NexusGenScalars['Date']; // Date!
  };
  ProductAssets: {
    // field return type
    _id: NexusGenScalars['ObjectId']; // ObjectId!
    assets: NexusGenRootTypes['Asset'][]; // [Asset!]!
    productId: NexusGenScalars['ObjectId']; // ObjectId!
    productSlug: string; // String!
  };
  ProductAttribute: {
    // field return type
    _id: NexusGenScalars['ObjectId']; // ObjectId!
    attribute: NexusGenRootTypes['Attribute']; // Attribute!
    attributeId: NexusGenScalars['ObjectId']; // ObjectId!
    number: number | null; // Float
    selectedOptionsIds: NexusGenScalars['ObjectId'][]; // [ObjectId!]!
    selectedOptionsSlugs: string[]; // [String!]!
    text: string; // String!
    textI18n: NexusGenScalars['JSONObject'] | null; // JSONObject
  };
  ProductCardPrices: {
    // field return type
    _id: NexusGenScalars['ObjectId']; // ObjectId!
    max: string; // String!
    min: string; // String!
  };
  ProductConnection: {
    // field return type
    _id: NexusGenScalars['ObjectId']; // ObjectId!
    attributeId: NexusGenScalars['ObjectId']; // ObjectId!
    attributeNameI18n: NexusGenScalars['JSONObject'] | null; // JSONObject
    attributeSlug: string; // String!
  };
  ProductConnectionItem: {
    // field return type
    _id: NexusGenScalars['ObjectId']; // ObjectId!
    product: NexusGenRootTypes['Product']; // Product!
    productId: NexusGenScalars['ObjectId']; // ObjectId!
  };
  ProductPayload: {
    // field return type
    message: string; // String!
    payload: NexusGenRootTypes['Product'] | null; // Product
    success: boolean; // Boolean!
  };
  ProductsPaginationPayload: {
    // field return type
    docs: NexusGenRootTypes['Product'][]; // [Product!]!
    hasNextPage: boolean; // Boolean!
    hasPrevPage: boolean; // Boolean!
    limit: number; // Int!
    page: number; // Int!
    sortBy: string; // String!
    sortDir: NexusGenEnums['SortDirection']; // SortDirection!
    totalActiveDocs: number; // Int!
    totalDocs: number; // Int!
    totalPages: number; // Int!
  };
  Query: {
    // field return type
    getAllAttributesGroups: NexusGenRootTypes['AttributesGroup'][]; // [AttributesGroup!]!
    getAllBrands: NexusGenRootTypes['BrandsPaginationPayload'] | null; // BrandsPaginationPayload
    getAllCities: NexusGenRootTypes['CitiesPaginationPayload']; // CitiesPaginationPayload!
    getAllCompanies: NexusGenRootTypes['CompaniesPaginationPayload'] | null; // CompaniesPaginationPayload
    getAllConfigs: NexusGenRootTypes['Config'][]; // [Config!]!
    getAllCountries: NexusGenRootTypes['Country'][]; // [Country!]!
    getAllCurrencies: NexusGenRootTypes['Currency'][]; // [Currency!]!
    getAllLanguages: NexusGenRootTypes['Language'][]; // [Language!]!
    getAllManufacturers: NexusGenRootTypes['ManufacturersPaginationPayload']; // ManufacturersPaginationPayload!
    getAllMetricsOptions: NexusGenRootTypes['Metric'][]; // [Metric!]!
    getAllOptionsGroups: NexusGenRootTypes['OptionsGroup'][]; // [OptionsGroup!]!
    getAllRoles: NexusGenRootTypes['Role'][]; // [Role!]!
    getAllRubricVariants: NexusGenRootTypes['RubricVariant'][]; // [RubricVariant!]!
    getAllRubrics: NexusGenRootTypes['Rubric'][]; // [Rubric!]!
    getAllShops: NexusGenRootTypes['ShopsPaginationPayload']; // ShopsPaginationPayload!
    getAllSuppliers: NexusGenRootTypes['SuppliersPaginationPayload']; // SuppliersPaginationPayload!
    getAttributePositioningOptions: NexusGenRootTypes['SelectOption'][]; // [SelectOption!]!
    getAttributeVariantsOptions: NexusGenRootTypes['SelectOption'][]; // [SelectOption!]!
    getAttributeViewVariantsOptions: NexusGenRootTypes['SelectOption'][]; // [SelectOption!]!
    getAttributesGroup: NexusGenRootTypes['AttributesGroup']; // AttributesGroup!
    getBrand: NexusGenRootTypes['Brand']; // Brand!
    getBrandAlphabetLists: NexusGenRootTypes['BrandsAlphabetList'][]; // [BrandsAlphabetList!]!
    getBrandBySlug: NexusGenRootTypes['Brand'] | null; // Brand
    getBrandCollectionAlphabetLists: NexusGenRootTypes['BrandCollectionsAlphabetList'][]; // [BrandCollectionsAlphabetList!]!
    getCategoriesAlphabetLists: NexusGenRootTypes['CategoriesAlphabetList'][]; // [CategoriesAlphabetList!]!
    getCity: NexusGenRootTypes['City']; // City!
    getCityBySlug: NexusGenRootTypes['City']; // City!
    getCompany: NexusGenRootTypes['Company'] | null; // Company
    getCompanyShops: NexusGenRootTypes['ShopsPaginationPayload']; // ShopsPaginationPayload!
    getGenderOptions: NexusGenRootTypes['SelectOption'][]; // [SelectOption!]!
    getISOLanguagesOptions: NexusGenRootTypes['SelectOption'][]; // [SelectOption!]!
    getIconsOptions: NexusGenRootTypes['SelectOption'][]; // [SelectOption!]!
    getManufacturer: NexusGenRootTypes['Manufacturer']; // Manufacturer!
    getManufacturerAlphabetLists: NexusGenRootTypes['ManufacturersAlphabetList'][]; // [ManufacturersAlphabetList!]!
    getManufacturerBySlug: NexusGenRootTypes['Manufacturer']; // Manufacturer!
    getOptionAlphabetLists: NexusGenRootTypes['OptionsAlphabetList'][]; // [OptionsAlphabetList!]!
    getOptionsGroup: NexusGenRootTypes['OptionsGroup']; // OptionsGroup!
    getOptionsGroupVariantsOptions: NexusGenRootTypes['SelectOption'][]; // [SelectOption!]!
    getProduct: NexusGenRootTypes['Product'] | null; // Product
    getProductBySlug: NexusGenRootTypes['Product'] | null; // Product
    getProductShops: NexusGenRootTypes['ShopProduct'][]; // [ShopProduct!]!
    getProductsList: NexusGenRootTypes['ProductsPaginationPayload']; // ProductsPaginationPayload!
    getRole: NexusGenRootTypes['Role'] | null; // Role
    getRubric: NexusGenRootTypes['Rubric']; // Rubric!
    getRubricBySlug: NexusGenRootTypes['Rubric']; // Rubric!
    getRubricVariant: NexusGenRootTypes['RubricVariant']; // RubricVariant!
    getSessionCities: NexusGenRootTypes['City'][]; // [City!]!
    getShop: NexusGenRootTypes['Shop']; // Shop!
    getShopBySlug: NexusGenRootTypes['Shop']; // Shop!
    getSupplier: NexusGenRootTypes['Supplier']; // Supplier!
    getSupplierAlphabetLists: NexusGenRootTypes['SuppliersAlphabetList'][]; // [SuppliersAlphabetList!]!
    getSupplierBySlug: NexusGenRootTypes['Supplier']; // Supplier!
    getValidationMessages: NexusGenRootTypes['Message'][]; // [Message!]!
  };
  Role: {
    // field return type
    _id: NexusGenScalars['ObjectId']; // ObjectId!
    appNavigation: NexusGenRootTypes['NavItem'][]; // [NavItem!]!
    cmsNavigation: NexusGenRootTypes['NavItem'][]; // [NavItem!]!
    createdAt: NexusGenScalars['Date']; // Date!
    description: string; // String!
    descriptionI18n: NexusGenScalars['JSONObject'] | null; // JSONObject
    isCompanyStaff: boolean; // Boolean!
    isStaff: boolean; // Boolean!
    name: string; // String!
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
    slug: string; // String!
    updatedAt: NexusGenScalars['Date']; // Date!
  };
  RolePayload: {
    // field return type
    message: string; // String!
    payload: NexusGenRootTypes['Role'] | null; // Role
    success: boolean; // Boolean!
  };
  RoleRule: {
    // field return type
    _id: NexusGenScalars['ObjectId']; // ObjectId!
    allow: boolean; // Boolean!
    description: string; // String!
    descriptionI18n: NexusGenScalars['JSONObject'] | null; // JSONObject
    name: string; // String!
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
    roleId: NexusGenScalars['ObjectId']; // ObjectId!
    slug: string; // String!
  };
  RoleRulePayload: {
    // field return type
    message: string; // String!
    payload: NexusGenRootTypes['RoleRule'] | null; // RoleRule
    success: boolean; // Boolean!
  };
  Rubric: {
    // field return type
    _id: NexusGenScalars['ObjectId']; // ObjectId!
    active: boolean; // Boolean!
    capitalise: boolean | null; // Boolean
    defaultTitleI18n: NexusGenScalars['JSONObject']; // JSONObject!
    description: string; // String!
    descriptionI18n: NexusGenScalars['JSONObject']; // JSONObject!
    gender: NexusGenEnums['Gender']; // Gender!
    icon: string | null; // String
    image: string | null; // String
    keywordI18n: NexusGenScalars['JSONObject']; // JSONObject!
    name: string; // String!
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
    prefixI18n: NexusGenScalars['JSONObject'] | null; // JSONObject
    priorities: NexusGenScalars['JSONObject']; // JSONObject!
    products: NexusGenRootTypes['ProductsPaginationPayload']; // ProductsPaginationPayload!
    shortDescription: string; // String!
    shortDescriptionI18n: NexusGenScalars['JSONObject']; // JSONObject!
    slug: string; // String!
    textBottomI18n: NexusGenScalars['JSONObject'] | null; // JSONObject
    textTopI18n: NexusGenScalars['JSONObject'] | null; // JSONObject
    variant: NexusGenRootTypes['RubricVariant']; // RubricVariant!
    variantId: NexusGenScalars['ObjectId']; // ObjectId!
    views: NexusGenScalars['JSONObject']; // JSONObject!
  };
  RubricAttribute: {
    // field return type
    _id: NexusGenScalars['ObjectId']; // ObjectId!
    metric: NexusGenRootTypes['Metric'] | null; // Metric
    name: string; // String!
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
    optionsGroup: NexusGenRootTypes['OptionsGroup'] | null; // OptionsGroup
    optionsGroupId: NexusGenScalars['ObjectId'] | null; // ObjectId
    positioningInTitle: NexusGenScalars['JSONObject'] | null; // JSONObject
    priorities: NexusGenScalars['JSONObject']; // JSONObject!
    showInCatalogueFilter: boolean; // Boolean!
    showInCatalogueNav: boolean; // Boolean!
    slug: string | null; // String
    variant: NexusGenEnums['AttributeVariant']; // AttributeVariant!
    viewVariant: NexusGenEnums['AttributeViewVariant']; // AttributeViewVariant!
    views: NexusGenScalars['JSONObject']; // JSONObject!
  };
  RubricAttributesGroup: {
    // field return type
    _id: NexusGenScalars['ObjectId']; // ObjectId!
    attributesIds: NexusGenScalars['ObjectId'][]; // [ObjectId!]!
    name: string; // String!
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
  };
  RubricOption: {
    // field return type
    _id: NexusGenScalars['ObjectId']; // ObjectId!
    color: string | null; // String
    icon: string | null; // String
    name: string; // String!
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
    priorities: NexusGenScalars['JSONObject']; // JSONObject!
    slug: string; // String!
    variants: NexusGenScalars['JSONObject']; // JSONObject!
    views: NexusGenScalars['JSONObject']; // JSONObject!
  };
  RubricPayload: {
    // field return type
    message: string; // String!
    payload: NexusGenRootTypes['Rubric'] | null; // Rubric
    success: boolean; // Boolean!
  };
  RubricVariant: {
    // field return type
    _id: NexusGenScalars['ObjectId']; // ObjectId!
    allowDelivery: boolean | null; // Boolean
    cardLayout: string | null; // String
    catalogueFilterLayout: string | null; // String
    catalogueHeadLayout: string | null; // String
    catalogueNavLayout: string | null; // String
    companySlug: string; // String!
    gridCatalogueColumns: number | null; // Int
    gridSnippetLayout: string | null; // String
    name: string; // String!
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
    rowSnippetLayout: string | null; // String
    showCardBrands: boolean | null; // Boolean
    showCardButtonsBackground: boolean | null; // Boolean
    showCardImagesSlider: boolean | null; // Boolean
    showCatalogueFilterBrands: boolean | null; // Boolean
    showCategoriesInFilter: boolean | null; // Boolean
    showCategoriesInNav: boolean | null; // Boolean
    showSnippetArticle: boolean | null; // Boolean
    showSnippetBackground: boolean | null; // Boolean
    showSnippetButtonsOnHover: boolean | null; // Boolean
    showSnippetConnections: boolean | null; // Boolean
    showSnippetRating: boolean | null; // Boolean
    slug: string; // String!
  };
  RubricVariantPayload: {
    // field return type
    message: string; // String!
    payload: NexusGenRootTypes['RubricVariant'] | null; // RubricVariant
    success: boolean; // Boolean!
  };
  SelectOption: {
    // field return type
    _id: string; // String!
    icon: string | null; // String
    name: string; // String!
  };
  Shop: {
    // field return type
    _id: NexusGenScalars['ObjectId']; // ObjectId!
    address: NexusGenRootTypes['Address']; // Address!
    assets: NexusGenRootTypes['Asset'][]; // [Asset!]!
    city: NexusGenRootTypes['City']; // City!
    citySlug: string; // String!
    company: NexusGenRootTypes['Company']; // Company!
    companyId: NexusGenScalars['ObjectId']; // ObjectId!
    contacts: NexusGenRootTypes['Contacts']; // Contacts!
    createdAt: NexusGenScalars['Date']; // Date!
    itemId: string; // String!
    logo: NexusGenRootTypes['Asset']; // Asset!
    mapMarker: NexusGenRootTypes['MapMarker'] | null; // MapMarker
    name: string; // String!
    productsCount: number; // Int!
    shopProducts: NexusGenRootTypes['ShopProductsPaginationPayload']; // ShopProductsPaginationPayload!
    slug: string; // String!
    updatedAt: NexusGenScalars['Date']; // Date!
  };
  ShopPayload: {
    // field return type
    message: string; // String!
    payload: NexusGenRootTypes['Shop'] | null; // Shop
    success: boolean; // Boolean!
  };
  ShopProduct: {
    // field return type
    _id: NexusGenScalars['ObjectId']; // ObjectId!
    available: number; // Int!
    barcode: string[] | null; // [String!]
    citySlug: string; // String!
    createdAt: NexusGenScalars['Date']; // Date!
    discountedPercent: number | null; // Int
    oldPrice: number | null; // Int
    oldPrices: NexusGenRootTypes['ShopProductOldPrice'][]; // [ShopProductOldPrice!]!
    price: number; // Int!
    product: NexusGenRootTypes['Product']; // Product!
    productId: NexusGenScalars['ObjectId']; // ObjectId!
    shop: NexusGenRootTypes['Shop']; // Shop!
    shopId: NexusGenScalars['ObjectId']; // ObjectId!
    updatedAt: NexusGenScalars['Date']; // Date!
  };
  ShopProductOldPrice: {
    // field return type
    createdAt: NexusGenScalars['Date']; // Date!
    price: number; // Int!
    updatedAt: NexusGenScalars['Date']; // Date!
  };
  ShopProductPayload: {
    // field return type
    message: string; // String!
    payload: NexusGenRootTypes['ShopProduct'] | null; // ShopProduct
    success: boolean; // Boolean!
  };
  ShopProductsPaginationPayload: {
    // field return type
    docs: NexusGenRootTypes['ShopProduct'][]; // [ShopProduct!]!
    hasNextPage: boolean; // Boolean!
    hasPrevPage: boolean; // Boolean!
    limit: number; // Int!
    page: number; // Int!
    sortBy: string; // String!
    sortDir: NexusGenEnums['SortDirection']; // SortDirection!
    totalActiveDocs: number; // Int!
    totalDocs: number; // Int!
    totalPages: number; // Int!
  };
  ShopsPaginationPayload: {
    // field return type
    docs: NexusGenRootTypes['Shop'][]; // [Shop!]!
    hasNextPage: boolean; // Boolean!
    hasPrevPage: boolean; // Boolean!
    limit: number; // Int!
    page: number; // Int!
    sortBy: string; // String!
    sortDir: NexusGenEnums['SortDirection']; // SortDirection!
    totalActiveDocs: number; // Int!
    totalDocs: number; // Int!
    totalPages: number; // Int!
  };
  Supplier: {
    // field return type
    _id: NexusGenScalars['ObjectId']; // ObjectId!
    createdAt: NexusGenScalars['Date']; // Date!
    description: string | null; // String
    descriptionI18n: NexusGenScalars['JSONObject'] | null; // JSONObject
    itemId: string; // String!
    name: string; // String!
    nameI18n: NexusGenScalars['JSONObject']; // JSONObject!
    updatedAt: NexusGenScalars['Date']; // Date!
    url: NexusGenScalars['URL'][] | null; // [URL!]
  };
  SupplierPayload: {
    // field return type
    message: string; // String!
    payload: NexusGenRootTypes['Supplier'] | null; // Supplier
    success: boolean; // Boolean!
  };
  SuppliersAlphabetList: {
    // field return type
    docs: NexusGenRootTypes['Supplier'][]; // [Supplier!]!
    letter: string; // String!
  };
  SuppliersPaginationPayload: {
    // field return type
    docs: NexusGenRootTypes['Supplier'][]; // [Supplier!]!
    hasNextPage: boolean; // Boolean!
    hasPrevPage: boolean; // Boolean!
    limit: number; // Int!
    page: number; // Int!
    sortBy: string; // String!
    sortDir: NexusGenEnums['SortDirection']; // SortDirection!
    totalActiveDocs: number; // Int!
    totalDocs: number; // Int!
    totalPages: number; // Int!
  };
  User: {
    // field return type
    _id: NexusGenScalars['ObjectId']; // ObjectId!
    createdAt: NexusGenScalars['Date']; // Date!
    email: NexusGenScalars['EmailAddress']; // EmailAddress!
    formattedPhone: NexusGenRootTypes['FormattedPhone']; // FormattedPhone!
    fullName: string; // String!
    itemId: string; // String!
    lastName: string | null; // String
    name: string; // String!
    phone: string; // String!
    role: NexusGenRootTypes['Role']; // Role!
    roleId: NexusGenScalars['ObjectId']; // ObjectId!
    secondName: string | null; // String
    shortName: string; // String!
    updatedAt: NexusGenScalars['Date']; // Date!
  };
  AlphabetList: {
    // field return type
    letter: string; // String!
  };
  Base: {
    // field return type
    _id: NexusGenScalars['ObjectId']; // ObjectId!
    itemId: string; // String!
  };
  PaginationPayload: {
    // field return type
    hasNextPage: boolean; // Boolean!
    hasPrevPage: boolean; // Boolean!
    limit: number; // Int!
    page: number; // Int!
    sortBy: string; // String!
    sortDir: NexusGenEnums['SortDirection']; // SortDirection!
    totalActiveDocs: number; // Int!
    totalDocs: number; // Int!
    totalPages: number; // Int!
  };
  Payload: {
    // field return type
    message: string; // String!
    success: boolean; // Boolean!
  };
  Timestamp: {
    // field return type
    createdAt: NexusGenScalars['Date']; // Date!
    updatedAt: NexusGenScalars['Date']; // Date!
  };
}

export interface NexusGenFieldTypeNames {
  Address: {
    // field return type name
    formattedAddress: 'String';
    formattedCoordinates: 'Coordinates';
    point: 'PointGeoJSON';
  };
  Asset: {
    // field return type name
    index: 'Int';
    url: 'String';
  };
  Attribute: {
    // field return type name
    _id: 'ObjectId';
    capitalise: 'Boolean';
    metric: 'Metric';
    name: 'String';
    nameI18n: 'JSONObject';
    notShowAsAlphabet: 'Boolean';
    optionsGroup: 'OptionsGroup';
    optionsGroupId: 'ObjectId';
    positioningInTitle: 'JSONObject';
    slug: 'String';
    variant: 'AttributeVariant';
    viewVariant: 'AttributeViewVariant';
  };
  AttributesGroup: {
    // field return type name
    _id: 'ObjectId';
    attributes: 'Attribute';
    attributesIds: 'ObjectId';
    name: 'String';
    nameI18n: 'JSONObject';
  };
  AttributesGroupPayload: {
    // field return type name
    message: 'String';
    payload: 'AttributesGroup';
    success: 'Boolean';
  };
  Brand: {
    // field return type name
    _id: 'ObjectId';
    collections: 'BrandCollectionsPaginationPayload';
    collectionsList: 'BrandCollection';
    createdAt: 'Date';
    description: 'String';
    descriptionI18n: 'JSONObject';
    itemId: 'String';
    name: 'String';
    nameI18n: 'String';
    updatedAt: 'Date';
    url: 'URL';
  };
  BrandCollection: {
    // field return type name
    _id: 'ObjectId';
    createdAt: 'Date';
    description: 'String';
    descriptionI18n: 'JSONObject';
    itemId: 'String';
    name: 'String';
    nameI18n: 'JSONObject';
    updatedAt: 'Date';
  };
  BrandCollectionsAlphabetList: {
    // field return type name
    docs: 'BrandCollection';
    letter: 'String';
  };
  BrandCollectionsPaginationPayload: {
    // field return type name
    docs: 'BrandCollection';
    hasNextPage: 'Boolean';
    hasPrevPage: 'Boolean';
    limit: 'Int';
    page: 'Int';
    sortBy: 'String';
    sortDir: 'SortDirection';
    totalActiveDocs: 'Int';
    totalDocs: 'Int';
    totalPages: 'Int';
  };
  BrandPayload: {
    // field return type name
    message: 'String';
    payload: 'Brand';
    success: 'Boolean';
  };
  BrandsAlphabetList: {
    // field return type name
    docs: 'Brand';
    letter: 'String';
  };
  BrandsPaginationPayload: {
    // field return type name
    docs: 'Brand';
    hasNextPage: 'Boolean';
    hasPrevPage: 'Boolean';
    limit: 'Int';
    page: 'Int';
    sortBy: 'String';
    sortDir: 'SortDirection';
    totalActiveDocs: 'Int';
    totalDocs: 'Int';
    totalPages: 'Int';
  };
  Cart: {
    // field return type name
    _id: 'ObjectId';
    cartBookingProducts: 'CartProduct';
    cartDeliveryProducts: 'CartProduct';
  };
  CartPayload: {
    // field return type name
    message: 'String';
    success: 'Boolean';
  };
  CartProduct: {
    // field return type name
    _id: 'ObjectId';
    amount: 'Int';
    itemId: 'String';
    productId: 'ObjectId';
    shopProductId: 'ObjectId';
  };
  CategoriesAlphabetList: {
    // field return type name
    docs: 'Category';
    letter: 'String';
  };
  Category: {
    // field return type name
    _id: 'ObjectId';
    categories: 'Category';
    image: 'String';
    name: 'String';
    nameI18n: 'JSONObject';
    parentId: 'ObjectId';
    priorities: 'JSONObject';
    replaceParentNameInCatalogueTitle: 'Boolean';
    rubricId: 'ObjectId';
    slug: 'String';
    views: 'JSONObject';
  };
  CategoryPayload: {
    // field return type name
    message: 'String';
    payload: 'Category';
    success: 'Boolean';
  };
  CitiesPaginationPayload: {
    // field return type name
    docs: 'City';
    hasNextPage: 'Boolean';
    hasPrevPage: 'Boolean';
    limit: 'Int';
    page: 'Int';
    sortBy: 'String';
    sortDir: 'SortDirection';
    totalActiveDocs: 'Int';
    totalDocs: 'Int';
    totalPages: 'Int';
  };
  City: {
    // field return type name
    _id: 'ObjectId';
    name: 'String';
    nameI18n: 'JSONObject';
    slug: 'String';
  };
  CompaniesPaginationPayload: {
    // field return type name
    docs: 'Company';
    hasNextPage: 'Boolean';
    hasPrevPage: 'Boolean';
    limit: 'Int';
    page: 'Int';
    sortBy: 'String';
    sortDir: 'SortDirection';
    totalActiveDocs: 'Int';
    totalDocs: 'Int';
    totalPages: 'Int';
  };
  Company: {
    // field return type name
    _id: 'ObjectId';
    contacts: 'Contacts';
    createdAt: 'Date';
    domain: 'String';
    itemId: 'String';
    logo: 'Asset';
    name: 'String';
    owner: 'User';
    ownerId: 'ObjectId';
    shops: 'ShopsPaginationPayload';
    shopsIds: 'ObjectId';
    slug: 'String';
    staff: 'User';
    staffIds: 'ObjectId';
    updatedAt: 'Date';
  };
  CompanyPayload: {
    // field return type name
    message: 'String';
    payload: 'Company';
    success: 'Boolean';
  };
  Config: {
    // field return type name
    _id: 'ObjectId';
    acceptedFormats: 'String';
    cities: 'JSONObject';
    companySlug: 'String';
    description: 'String';
    group: 'String';
    multi: 'Boolean';
    name: 'String';
    singleValue: 'String';
    slug: 'String';
    value: 'String';
    variant: 'ConfigVariant';
  };
  ConfigPayload: {
    // field return type name
    message: 'String';
    payload: 'Config';
    success: 'Boolean';
  };
  Contacts: {
    // field return type name
    emails: 'EmailAddress';
    formattedPhones: 'FormattedPhone';
    phones: 'String';
  };
  Coordinates: {
    // field return type name
    lat: 'Float';
    lng: 'Float';
  };
  Country: {
    // field return type name
    _id: 'ObjectId';
    cities: 'City';
    currency: 'String';
    name: 'String';
  };
  CountryPayload: {
    // field return type name
    message: 'String';
    payload: 'Country';
    success: 'Boolean';
  };
  Currency: {
    // field return type name
    _id: 'ObjectId';
    name: 'String';
  };
  CurrencyPayload: {
    // field return type name
    message: 'String';
    payload: 'Currency';
    success: 'Boolean';
  };
  FormattedPhone: {
    // field return type name
    raw: 'String';
    readable: 'String';
  };
  Language: {
    // field return type name
    _id: 'ObjectId';
    name: 'String';
    nativeName: 'String';
    slug: 'String';
  };
  LanguagePayload: {
    // field return type name
    message: 'String';
    payload: 'Language';
    success: 'Boolean';
  };
  Manufacturer: {
    // field return type name
    _id: 'ObjectId';
    createdAt: 'Date';
    description: 'String';
    descriptionI18n: 'JSONObject';
    itemId: 'String';
    name: 'String';
    nameI18n: 'JSONObject';
    updatedAt: 'Date';
    url: 'URL';
  };
  ManufacturerPayload: {
    // field return type name
    message: 'String';
    payload: 'Manufacturer';
    success: 'Boolean';
  };
  ManufacturersAlphabetList: {
    // field return type name
    docs: 'Manufacturer';
    letter: 'String';
  };
  ManufacturersPaginationPayload: {
    // field return type name
    docs: 'Manufacturer';
    hasNextPage: 'Boolean';
    hasPrevPage: 'Boolean';
    limit: 'Int';
    page: 'Int';
    sortBy: 'String';
    sortDir: 'SortDirection';
    totalActiveDocs: 'Int';
    totalDocs: 'Int';
    totalPages: 'Int';
  };
  MapMarker: {
    // field return type name
    darkTheme: 'String';
    lightTheme: 'String';
  };
  Message: {
    // field return type name
    _id: 'ObjectId';
    message: 'String';
    messageI18n: 'JSONObject';
    slug: 'String';
  };
  MessagesGroup: {
    // field return type name
    _id: 'ObjectId';
    messages: 'Message';
    name: 'String';
  };
  Metric: {
    // field return type name
    _id: 'ObjectId';
    name: 'String';
    nameI18n: 'JSONObject';
  };
  MetricPayload: {
    // field return type name
    message: 'String';
    payload: 'Metric';
    success: 'Boolean';
  };
  Mutation: {
    // field return type name
    addAttributeToGroup: 'AttributesGroupPayload';
    addAttributesGroupToCategory: 'CategoryPayload';
    addAttributesGroupToRubric: 'RubricPayload';
    addCityToCountry: 'CountryPayload';
    addCollectionToBrand: 'BrandPayload';
    addManyProductsToShop: 'ShopPayload';
    addOptionToGroup: 'OptionsGroupPayload';
    addProductToCart: 'CartPayload';
    addProductToConnection: 'ProductPayload';
    addShopProductSupplier: 'ShopProductPayload';
    addShopToCartProduct: 'CartPayload';
    addShopToCompany: 'CompanyPayload';
    addShoplessProductToCart: 'CartPayload';
    clearCart: 'CartPayload';
    createAttributesGroup: 'AttributesGroupPayload';
    createBrand: 'BrandPayload';
    createCategory: 'CategoryPayload';
    createCompany: 'CompanyPayload';
    createCountry: 'CountryPayload';
    createCurrency: 'CurrencyPayload';
    createLanguage: 'LanguagePayload';
    createManufacturer: 'ManufacturerPayload';
    createMetric: 'MetricPayload';
    createNavItem: 'NavItemPayload';
    createOptionsGroup: 'OptionsGroupPayload';
    createOrderStatus: 'OrderStatusPayload';
    createProductConnection: 'ProductPayload';
    createRole: 'RolePayload';
    createRubric: 'RubricPayload';
    createRubricVariant: 'RubricVariantPayload';
    createSupplier: 'SupplierPayload';
    deleteAttributeFromGroup: 'AttributesGroupPayload';
    deleteAttributesGroup: 'AttributesGroupPayload';
    deleteAttributesGroupFromCategory: 'CategoryPayload';
    deleteAttributesGroupFromRubric: 'RubricPayload';
    deleteBrand: 'BrandPayload';
    deleteCategory: 'CategoryPayload';
    deleteCityFromCountry: 'CountryPayload';
    deleteCollectionFromBrand: 'BrandPayload';
    deleteCompany: 'CompanyPayload';
    deleteCountry: 'CountryPayload';
    deleteCurrency: 'CurrencyPayload';
    deleteLanguage: 'LanguagePayload';
    deleteManufacturer: 'ManufacturerPayload';
    deleteMetric: 'MetricPayload';
    deleteNavItem: 'NavItemPayload';
    deleteOptionFromGroup: 'OptionsGroupPayload';
    deleteOptionsGroup: 'OptionsGroupPayload';
    deleteOrderStatus: 'OrderStatusPayload';
    deleteProductFromCart: 'CartPayload';
    deleteProductFromConnection: 'ProductPayload';
    deleteProductFromShop: 'ShopPayload';
    deleteRole: 'RolePayload';
    deleteRubric: 'RubricPayload';
    deleteRubricVariant: 'RubricVariantPayload';
    deleteShopAsset: 'ShopPayload';
    deleteShopFromCompany: 'CompanyPayload';
    deleteShopProductSupplier: 'ShopProductPayload';
    deleteSupplier: 'SupplierPayload';
    generateShopToken: 'ShopPayload';
    moveAttribute: 'AttributesGroupPayload';
    moveOption: 'OptionsGroupPayload';
    repeatOrder: 'CartPayload';
    updateAttributeInGroup: 'AttributesGroupPayload';
    updateAttributeInRubric: 'RubricPayload';
    updateAttributesGroup: 'AttributesGroupPayload';
    updateBrand: 'BrandPayload';
    updateCatalogueCounters: 'Boolean';
    updateCategory: 'CategoryPayload';
    updateCityInCountry: 'CountryPayload';
    updateCollectionInBrand: 'BrandPayload';
    updateCompany: 'CompanyPayload';
    updateConfig: 'ConfigPayload';
    updateCountry: 'CountryPayload';
    updateCurrency: 'CurrencyPayload';
    updateLanguage: 'LanguagePayload';
    updateManufacturer: 'ManufacturerPayload';
    updateMetric: 'MetricPayload';
    updateNavItem: 'NavItemPayload';
    updateOptionInGroup: 'OptionsGroupPayload';
    updateOptionsGroup: 'OptionsGroupPayload';
    updateOrderStatus: 'OrderStatusPayload';
    updateProductBrand: 'ProductPayload';
    updateProductBrandCollection: 'ProductPayload';
    updateProductCardContent: 'ProductPayload';
    updateProductInCart: 'CartPayload';
    updateProductManufacturer: 'ProductPayload';
    updateProductNumberAttribute: 'ProductPayload';
    updateProductSelectAttribute: 'ProductPayload';
    updateProductTextAttribute: 'ProductPayload';
    updateRole: 'RolePayload';
    updateRoleNav: 'RolePayload';
    updateRoleRule: 'RoleRulePayload';
    updateRubric: 'RubricPayload';
    updateRubricVariant: 'RubricVariantPayload';
    updateShop: 'ShopPayload';
    updateShopAssetIndex: 'ShopPayload';
    updateShopProductSupplier: 'ShopProductPayload';
    updateSupplier: 'SupplierPayload';
    updateVisibleCategoriesInNavDropdown: 'ConfigPayload';
  };
  NavItem: {
    // field return type name
    _id: 'ObjectId';
    children: 'NavItem';
    icon: 'String';
    index: 'Int';
    name: 'String';
    nameI18n: 'JSONObject';
    navGroup: 'String';
    parentId: 'ObjectId';
    path: 'String';
    slug: 'String';
  };
  NavItemPayload: {
    // field return type name
    message: 'String';
    payload: 'NavItem';
    success: 'Boolean';
  };
  Option: {
    // field return type name
    _id: 'ObjectId';
    color: 'String';
    gender: 'Gender';
    image: 'String';
    name: 'String';
    nameI18n: 'JSONObject';
    options: 'Option';
    slug: 'String';
    variants: 'JSONObject';
  };
  OptionsAlphabetList: {
    // field return type name
    docs: 'Option';
    letter: 'String';
  };
  OptionsGroup: {
    // field return type name
    _id: 'ObjectId';
    name: 'String';
    nameI18n: 'JSONObject';
    options: 'Option';
    variant: 'OptionsGroupVariant';
  };
  OptionsGroupPayload: {
    // field return type name
    message: 'String';
    payload: 'OptionsGroup';
    success: 'Boolean';
  };
  Order: {
    // field return type name
    _id: 'ObjectId';
    comment: 'String';
    createdAt: 'Date';
    itemId: 'String';
    statusId: 'ObjectId';
    updatedAt: 'Date';
  };
  OrderCustomer: {
    // field return type name
    _id: 'ObjectId';
    email: 'EmailAddress';
    formattedPhone: 'FormattedPhone';
    fullName: 'String';
    itemId: 'Int';
    lastName: 'String';
    name: 'String';
    phone: 'String';
    secondName: 'String';
    shortName: 'String';
    user: 'User';
    userId: 'ObjectId';
  };
  OrderLog: {
    // field return type name
    _id: 'ObjectId';
    createdAt: 'Date';
    updatedAt: 'Date';
    user: 'User';
    userId: 'ObjectId';
    variant: 'OrderLogVariant';
  };
  OrderProduct: {
    // field return type name
    _id: 'ObjectId';
    amount: 'Int';
    companyId: 'ObjectId';
    formattedPrice: 'String';
    formattedTotalPrice: 'String';
    itemId: 'Int';
    nameI18n: 'JSONObject';
    originalName: 'String';
    price: 'Int';
    product: 'Product';
    productId: 'ObjectId';
    shop: 'Shop';
    shopId: 'ObjectId';
    shopProduct: 'ShopProduct';
    shopProductId: 'ObjectId';
    slug: 'String';
    totalPrice: 'Int';
  };
  OrderStatus: {
    // field return type name
    _id: 'ObjectId';
    color: 'String';
    createdAt: 'Date';
    index: 'Int';
    name: 'String';
    nameI18n: 'JSONObject';
    slug: 'String';
    updatedAt: 'Date';
  };
  OrderStatusPayload: {
    // field return type name
    message: 'String';
    payload: 'OrderStatus';
    success: 'Boolean';
  };
  PointGeoJSON: {
    // field return type name
    coordinates: 'Float';
    type: 'String';
  };
  Product: {
    // field return type name
    _id: 'ObjectId';
    active: 'Boolean';
    assets: 'ProductAssets';
    attributes: 'ProductAttribute';
    available: 'Boolean';
    barcode: 'String';
    brand: 'Brand';
    brandCollection: 'BrandCollection';
    brandCollectionSlug: 'String';
    brandSlug: 'String';
    cardPrices: 'ProductCardPrices';
    connections: 'ProductConnection';
    createdAt: 'Date';
    description: 'String';
    descriptionI18n: 'JSONObject';
    itemId: 'String';
    mainImage: 'String';
    manufacturer: 'Manufacturer';
    manufacturerSlug: 'String';
    nameI18n: 'JSONObject';
    originalName: 'String';
    rubric: 'Rubric';
    rubricId: 'ObjectId';
    rubricSlug: 'String';
    shopProducts: 'ShopProduct';
    shopsCount: 'Int';
    slug: 'String';
    snippetTitle: 'String';
    supplierSlug: 'String';
    updatedAt: 'Date';
  };
  ProductAssets: {
    // field return type name
    _id: 'ObjectId';
    assets: 'Asset';
    productId: 'ObjectId';
    productSlug: 'String';
  };
  ProductAttribute: {
    // field return type name
    _id: 'ObjectId';
    attribute: 'Attribute';
    attributeId: 'ObjectId';
    number: 'Float';
    selectedOptionsIds: 'ObjectId';
    selectedOptionsSlugs: 'String';
    text: 'String';
    textI18n: 'JSONObject';
  };
  ProductCardPrices: {
    // field return type name
    _id: 'ObjectId';
    max: 'String';
    min: 'String';
  };
  ProductConnection: {
    // field return type name
    _id: 'ObjectId';
    attributeId: 'ObjectId';
    attributeNameI18n: 'JSONObject';
    attributeSlug: 'String';
  };
  ProductConnectionItem: {
    // field return type name
    _id: 'ObjectId';
    product: 'Product';
    productId: 'ObjectId';
  };
  ProductPayload: {
    // field return type name
    message: 'String';
    payload: 'Product';
    success: 'Boolean';
  };
  ProductsPaginationPayload: {
    // field return type name
    docs: 'Product';
    hasNextPage: 'Boolean';
    hasPrevPage: 'Boolean';
    limit: 'Int';
    page: 'Int';
    sortBy: 'String';
    sortDir: 'SortDirection';
    totalActiveDocs: 'Int';
    totalDocs: 'Int';
    totalPages: 'Int';
  };
  Query: {
    // field return type name
    getAllAttributesGroups: 'AttributesGroup';
    getAllBrands: 'BrandsPaginationPayload';
    getAllCities: 'CitiesPaginationPayload';
    getAllCompanies: 'CompaniesPaginationPayload';
    getAllConfigs: 'Config';
    getAllCountries: 'Country';
    getAllCurrencies: 'Currency';
    getAllLanguages: 'Language';
    getAllManufacturers: 'ManufacturersPaginationPayload';
    getAllMetricsOptions: 'Metric';
    getAllOptionsGroups: 'OptionsGroup';
    getAllRoles: 'Role';
    getAllRubricVariants: 'RubricVariant';
    getAllRubrics: 'Rubric';
    getAllShops: 'ShopsPaginationPayload';
    getAllSuppliers: 'SuppliersPaginationPayload';
    getAttributePositioningOptions: 'SelectOption';
    getAttributeVariantsOptions: 'SelectOption';
    getAttributeViewVariantsOptions: 'SelectOption';
    getAttributesGroup: 'AttributesGroup';
    getBrand: 'Brand';
    getBrandAlphabetLists: 'BrandsAlphabetList';
    getBrandBySlug: 'Brand';
    getBrandCollectionAlphabetLists: 'BrandCollectionsAlphabetList';
    getCategoriesAlphabetLists: 'CategoriesAlphabetList';
    getCity: 'City';
    getCityBySlug: 'City';
    getCompany: 'Company';
    getCompanyShops: 'ShopsPaginationPayload';
    getGenderOptions: 'SelectOption';
    getISOLanguagesOptions: 'SelectOption';
    getIconsOptions: 'SelectOption';
    getManufacturer: 'Manufacturer';
    getManufacturerAlphabetLists: 'ManufacturersAlphabetList';
    getManufacturerBySlug: 'Manufacturer';
    getOptionAlphabetLists: 'OptionsAlphabetList';
    getOptionsGroup: 'OptionsGroup';
    getOptionsGroupVariantsOptions: 'SelectOption';
    getProduct: 'Product';
    getProductBySlug: 'Product';
    getProductShops: 'ShopProduct';
    getProductsList: 'ProductsPaginationPayload';
    getRole: 'Role';
    getRubric: 'Rubric';
    getRubricBySlug: 'Rubric';
    getRubricVariant: 'RubricVariant';
    getSessionCities: 'City';
    getShop: 'Shop';
    getShopBySlug: 'Shop';
    getSupplier: 'Supplier';
    getSupplierAlphabetLists: 'SuppliersAlphabetList';
    getSupplierBySlug: 'Supplier';
    getValidationMessages: 'Message';
  };
  Role: {
    // field return type name
    _id: 'ObjectId';
    appNavigation: 'NavItem';
    cmsNavigation: 'NavItem';
    createdAt: 'Date';
    description: 'String';
    descriptionI18n: 'JSONObject';
    isCompanyStaff: 'Boolean';
    isStaff: 'Boolean';
    name: 'String';
    nameI18n: 'JSONObject';
    slug: 'String';
    updatedAt: 'Date';
  };
  RolePayload: {
    // field return type name
    message: 'String';
    payload: 'Role';
    success: 'Boolean';
  };
  RoleRule: {
    // field return type name
    _id: 'ObjectId';
    allow: 'Boolean';
    description: 'String';
    descriptionI18n: 'JSONObject';
    name: 'String';
    nameI18n: 'JSONObject';
    roleId: 'ObjectId';
    slug: 'String';
  };
  RoleRulePayload: {
    // field return type name
    message: 'String';
    payload: 'RoleRule';
    success: 'Boolean';
  };
  Rubric: {
    // field return type name
    _id: 'ObjectId';
    active: 'Boolean';
    capitalise: 'Boolean';
    defaultTitleI18n: 'JSONObject';
    description: 'String';
    descriptionI18n: 'JSONObject';
    gender: 'Gender';
    icon: 'String';
    image: 'String';
    keywordI18n: 'JSONObject';
    name: 'String';
    nameI18n: 'JSONObject';
    prefixI18n: 'JSONObject';
    priorities: 'JSONObject';
    products: 'ProductsPaginationPayload';
    shortDescription: 'String';
    shortDescriptionI18n: 'JSONObject';
    slug: 'String';
    textBottomI18n: 'JSONObject';
    textTopI18n: 'JSONObject';
    variant: 'RubricVariant';
    variantId: 'ObjectId';
    views: 'JSONObject';
  };
  RubricAttribute: {
    // field return type name
    _id: 'ObjectId';
    metric: 'Metric';
    name: 'String';
    nameI18n: 'JSONObject';
    optionsGroup: 'OptionsGroup';
    optionsGroupId: 'ObjectId';
    positioningInTitle: 'JSONObject';
    priorities: 'JSONObject';
    showInCatalogueFilter: 'Boolean';
    showInCatalogueNav: 'Boolean';
    slug: 'String';
    variant: 'AttributeVariant';
    viewVariant: 'AttributeViewVariant';
    views: 'JSONObject';
  };
  RubricAttributesGroup: {
    // field return type name
    _id: 'ObjectId';
    attributesIds: 'ObjectId';
    name: 'String';
    nameI18n: 'JSONObject';
  };
  RubricOption: {
    // field return type name
    _id: 'ObjectId';
    color: 'String';
    icon: 'String';
    name: 'String';
    nameI18n: 'JSONObject';
    priorities: 'JSONObject';
    slug: 'String';
    variants: 'JSONObject';
    views: 'JSONObject';
  };
  RubricPayload: {
    // field return type name
    message: 'String';
    payload: 'Rubric';
    success: 'Boolean';
  };
  RubricVariant: {
    // field return type name
    _id: 'ObjectId';
    allowDelivery: 'Boolean';
    cardLayout: 'String';
    catalogueFilterLayout: 'String';
    catalogueHeadLayout: 'String';
    catalogueNavLayout: 'String';
    companySlug: 'String';
    gridCatalogueColumns: 'Int';
    gridSnippetLayout: 'String';
    name: 'String';
    nameI18n: 'JSONObject';
    rowSnippetLayout: 'String';
    showCardBrands: 'Boolean';
    showCardButtonsBackground: 'Boolean';
    showCardImagesSlider: 'Boolean';
    showCatalogueFilterBrands: 'Boolean';
    showCategoriesInFilter: 'Boolean';
    showCategoriesInNav: 'Boolean';
    showSnippetArticle: 'Boolean';
    showSnippetBackground: 'Boolean';
    showSnippetButtonsOnHover: 'Boolean';
    showSnippetConnections: 'Boolean';
    showSnippetRating: 'Boolean';
    slug: 'String';
  };
  RubricVariantPayload: {
    // field return type name
    message: 'String';
    payload: 'RubricVariant';
    success: 'Boolean';
  };
  SelectOption: {
    // field return type name
    _id: 'String';
    icon: 'String';
    name: 'String';
  };
  Shop: {
    // field return type name
    _id: 'ObjectId';
    address: 'Address';
    assets: 'Asset';
    city: 'City';
    citySlug: 'String';
    company: 'Company';
    companyId: 'ObjectId';
    contacts: 'Contacts';
    createdAt: 'Date';
    itemId: 'String';
    logo: 'Asset';
    mapMarker: 'MapMarker';
    name: 'String';
    productsCount: 'Int';
    shopProducts: 'ShopProductsPaginationPayload';
    slug: 'String';
    updatedAt: 'Date';
  };
  ShopPayload: {
    // field return type name
    message: 'String';
    payload: 'Shop';
    success: 'Boolean';
  };
  ShopProduct: {
    // field return type name
    _id: 'ObjectId';
    available: 'Int';
    barcode: 'String';
    citySlug: 'String';
    createdAt: 'Date';
    discountedPercent: 'Int';
    oldPrice: 'Int';
    oldPrices: 'ShopProductOldPrice';
    price: 'Int';
    product: 'Product';
    productId: 'ObjectId';
    shop: 'Shop';
    shopId: 'ObjectId';
    updatedAt: 'Date';
  };
  ShopProductOldPrice: {
    // field return type name
    createdAt: 'Date';
    price: 'Int';
    updatedAt: 'Date';
  };
  ShopProductPayload: {
    // field return type name
    message: 'String';
    payload: 'ShopProduct';
    success: 'Boolean';
  };
  ShopProductsPaginationPayload: {
    // field return type name
    docs: 'ShopProduct';
    hasNextPage: 'Boolean';
    hasPrevPage: 'Boolean';
    limit: 'Int';
    page: 'Int';
    sortBy: 'String';
    sortDir: 'SortDirection';
    totalActiveDocs: 'Int';
    totalDocs: 'Int';
    totalPages: 'Int';
  };
  ShopsPaginationPayload: {
    // field return type name
    docs: 'Shop';
    hasNextPage: 'Boolean';
    hasPrevPage: 'Boolean';
    limit: 'Int';
    page: 'Int';
    sortBy: 'String';
    sortDir: 'SortDirection';
    totalActiveDocs: 'Int';
    totalDocs: 'Int';
    totalPages: 'Int';
  };
  Supplier: {
    // field return type name
    _id: 'ObjectId';
    createdAt: 'Date';
    description: 'String';
    descriptionI18n: 'JSONObject';
    itemId: 'String';
    name: 'String';
    nameI18n: 'JSONObject';
    updatedAt: 'Date';
    url: 'URL';
  };
  SupplierPayload: {
    // field return type name
    message: 'String';
    payload: 'Supplier';
    success: 'Boolean';
  };
  SuppliersAlphabetList: {
    // field return type name
    docs: 'Supplier';
    letter: 'String';
  };
  SuppliersPaginationPayload: {
    // field return type name
    docs: 'Supplier';
    hasNextPage: 'Boolean';
    hasPrevPage: 'Boolean';
    limit: 'Int';
    page: 'Int';
    sortBy: 'String';
    sortDir: 'SortDirection';
    totalActiveDocs: 'Int';
    totalDocs: 'Int';
    totalPages: 'Int';
  };
  User: {
    // field return type name
    _id: 'ObjectId';
    createdAt: 'Date';
    email: 'EmailAddress';
    formattedPhone: 'FormattedPhone';
    fullName: 'String';
    itemId: 'String';
    lastName: 'String';
    name: 'String';
    phone: 'String';
    role: 'Role';
    roleId: 'ObjectId';
    secondName: 'String';
    shortName: 'String';
    updatedAt: 'Date';
  };
  AlphabetList: {
    // field return type name
    letter: 'String';
  };
  Base: {
    // field return type name
    _id: 'ObjectId';
    itemId: 'String';
  };
  PaginationPayload: {
    // field return type name
    hasNextPage: 'Boolean';
    hasPrevPage: 'Boolean';
    limit: 'Int';
    page: 'Int';
    sortBy: 'String';
    sortDir: 'SortDirection';
    totalActiveDocs: 'Int';
    totalDocs: 'Int';
    totalPages: 'Int';
  };
  Payload: {
    // field return type name
    message: 'String';
    success: 'Boolean';
  };
  Timestamp: {
    // field return type name
    createdAt: 'Date';
    updatedAt: 'Date';
  };
}

export interface NexusGenArgTypes {
  Brand: {
    collections: {
      // args
      input?: NexusGenInputs['PaginationInput'] | null; // PaginationInput
    };
  };
  Company: {
    shops: {
      // args
      input?: NexusGenInputs['PaginationInput'] | null; // PaginationInput
    };
  };
  Mutation: {
    addAttributeToGroup: {
      // args
      input: NexusGenInputs['AddAttributeToGroupInput']; // AddAttributeToGroupInput!
    };
    addAttributesGroupToCategory: {
      // args
      input: NexusGenInputs['AddAttributesGroupToCategoryInput']; // AddAttributesGroupToCategoryInput!
    };
    addAttributesGroupToRubric: {
      // args
      input: NexusGenInputs['AddAttributesGroupToRubricInput']; // AddAttributesGroupToRubricInput!
    };
    addCityToCountry: {
      // args
      input: NexusGenInputs['AddCityToCountryInput']; // AddCityToCountryInput!
    };
    addCollectionToBrand: {
      // args
      input: NexusGenInputs['AddCollectionToBrandInput']; // AddCollectionToBrandInput!
    };
    addManyProductsToShop: {
      // args
      input: NexusGenInputs['AddProductToShopInput'][]; // [AddProductToShopInput!]!
    };
    addOptionToGroup: {
      // args
      input: NexusGenInputs['AddOptionToGroupInput']; // AddOptionToGroupInput!
    };
    addProductToCart: {
      // args
      input: NexusGenInputs['AddProductToCartInput']; // AddProductToCartInput!
    };
    addProductToConnection: {
      // args
      input: NexusGenInputs['AddProductToConnectionInput']; // AddProductToConnectionInput!
    };
    addShopProductSupplier: {
      // args
      input: NexusGenInputs['AddShopProductSupplierInput']; // AddShopProductSupplierInput!
    };
    addShopToCartProduct: {
      // args
      input: NexusGenInputs['AddShopToCartProductInput']; // AddShopToCartProductInput!
    };
    addShopToCompany: {
      // args
      input: NexusGenInputs['AddShopToCompanyInput']; // AddShopToCompanyInput!
    };
    addShoplessProductToCart: {
      // args
      input: NexusGenInputs['AddShoplessProductToCartInput']; // AddShoplessProductToCartInput!
    };
    createAttributesGroup: {
      // args
      input: NexusGenInputs['CreateAttributesGroupInput']; // CreateAttributesGroupInput!
    };
    createBrand: {
      // args
      input: NexusGenInputs['CreateBrandInput']; // CreateBrandInput!
    };
    createCategory: {
      // args
      input: NexusGenInputs['CreateCategoryInput']; // CreateCategoryInput!
    };
    createCompany: {
      // args
      input: NexusGenInputs['CreateCompanyInput']; // CreateCompanyInput!
    };
    createCountry: {
      // args
      input: NexusGenInputs['CreateCountryInput']; // CreateCountryInput!
    };
    createCurrency: {
      // args
      input: NexusGenInputs['CreateCurrencyInput']; // CreateCurrencyInput!
    };
    createLanguage: {
      // args
      input: NexusGenInputs['CreateLanguageInput']; // CreateLanguageInput!
    };
    createManufacturer: {
      // args
      input: NexusGenInputs['CreateManufacturerInput']; // CreateManufacturerInput!
    };
    createMetric: {
      // args
      input: NexusGenInputs['CreateMetricInput']; // CreateMetricInput!
    };
    createNavItem: {
      // args
      input: NexusGenInputs['CreateNavItemInput']; // CreateNavItemInput!
    };
    createOptionsGroup: {
      // args
      input: NexusGenInputs['CreateOptionsGroupInput']; // CreateOptionsGroupInput!
    };
    createOrderStatus: {
      // args
      input: NexusGenInputs['CreateOrderStatusInput']; // CreateOrderStatusInput!
    };
    createProductConnection: {
      // args
      input: NexusGenInputs['CreateProductConnectionInput']; // CreateProductConnectionInput!
    };
    createRole: {
      // args
      input: NexusGenInputs['CreateRoleInput']; // CreateRoleInput!
    };
    createRubric: {
      // args
      input: NexusGenInputs['CreateRubricInput']; // CreateRubricInput!
    };
    createRubricVariant: {
      // args
      input: NexusGenInputs['CreateRubricVariantInput']; // CreateRubricVariantInput!
    };
    createSupplier: {
      // args
      input: NexusGenInputs['CreateSupplierInput']; // CreateSupplierInput!
    };
    deleteAttributeFromGroup: {
      // args
      input: NexusGenInputs['DeleteAttributeFromGroupInput']; // DeleteAttributeFromGroupInput!
    };
    deleteAttributesGroup: {
      // args
      _id: NexusGenScalars['ObjectId']; // ObjectId!
    };
    deleteAttributesGroupFromCategory: {
      // args
      input: NexusGenInputs['DeleteAttributesGroupFromCategoryInput']; // DeleteAttributesGroupFromCategoryInput!
    };
    deleteAttributesGroupFromRubric: {
      // args
      input: NexusGenInputs['DeleteAttributesGroupFromRubricInput']; // DeleteAttributesGroupFromRubricInput!
    };
    deleteBrand: {
      // args
      _id: NexusGenScalars['ObjectId']; // ObjectId!
    };
    deleteCategory: {
      // args
      _id: NexusGenScalars['ObjectId']; // ObjectId!
    };
    deleteCityFromCountry: {
      // args
      input: NexusGenInputs['DeleteCityFromCountryInput']; // DeleteCityFromCountryInput!
    };
    deleteCollectionFromBrand: {
      // args
      input: NexusGenInputs['DeleteCollectionFromBrandInput']; // DeleteCollectionFromBrandInput!
    };
    deleteCompany: {
      // args
      _id: NexusGenScalars['ObjectId']; // ObjectId!
    };
    deleteCountry: {
      // args
      _id: NexusGenScalars['ObjectId']; // ObjectId!
    };
    deleteCurrency: {
      // args
      _id: NexusGenScalars['ObjectId']; // ObjectId!
    };
    deleteLanguage: {
      // args
      _id: NexusGenScalars['ObjectId']; // ObjectId!
    };
    deleteManufacturer: {
      // args
      _id: NexusGenScalars['ObjectId']; // ObjectId!
    };
    deleteMetric: {
      // args
      _id: NexusGenScalars['ObjectId']; // ObjectId!
    };
    deleteNavItem: {
      // args
      _id: NexusGenScalars['ObjectId']; // ObjectId!
    };
    deleteOptionFromGroup: {
      // args
      input: NexusGenInputs['DeleteOptionFromGroupInput']; // DeleteOptionFromGroupInput!
    };
    deleteOptionsGroup: {
      // args
      _id: NexusGenScalars['ObjectId']; // ObjectId!
    };
    deleteOrderStatus: {
      // args
      _id: NexusGenScalars['ObjectId']; // ObjectId!
    };
    deleteProductFromCart: {
      // args
      input: NexusGenInputs['DeleteProductFromCartInput']; // DeleteProductFromCartInput!
    };
    deleteProductFromConnection: {
      // args
      input: NexusGenInputs['DeleteProductFromConnectionInput']; // DeleteProductFromConnectionInput!
    };
    deleteProductFromShop: {
      // args
      input: NexusGenInputs['DeleteProductFromShopInput']; // DeleteProductFromShopInput!
    };
    deleteRole: {
      // args
      _id: NexusGenScalars['ObjectId']; // ObjectId!
    };
    deleteRubric: {
      // args
      _id: NexusGenScalars['ObjectId']; // ObjectId!
    };
    deleteRubricVariant: {
      // args
      _id: NexusGenScalars['ObjectId']; // ObjectId!
    };
    deleteShopAsset: {
      // args
      input: NexusGenInputs['DeleteShopAssetInput']; // DeleteShopAssetInput!
    };
    deleteShopFromCompany: {
      // args
      input: NexusGenInputs['DeleteShopFromCompanyInput']; // DeleteShopFromCompanyInput!
    };
    deleteShopProductSupplier: {
      // args
      _id: NexusGenScalars['ObjectId']; // ObjectId!
    };
    deleteSupplier: {
      // args
      _id: NexusGenScalars['ObjectId']; // ObjectId!
    };
    generateShopToken: {
      // args
      _id: NexusGenScalars['ObjectId']; // ObjectId!
    };
    moveAttribute: {
      // args
      input: NexusGenInputs['MoveAttributeInput']; // MoveAttributeInput!
    };
    moveOption: {
      // args
      input: NexusGenInputs['MoveOptionInput']; // MoveOptionInput!
    };
    repeatOrder: {
      // args
      input: NexusGenInputs['RepeatOrderInput']; // RepeatOrderInput!
    };
    updateAttributeInGroup: {
      // args
      input: NexusGenInputs['UpdateAttributeInGroupInput']; // UpdateAttributeInGroupInput!
    };
    updateAttributeInRubric: {
      // args
      input: NexusGenInputs['UpdateAttributeInRubricInput']; // UpdateAttributeInRubricInput!
    };
    updateAttributesGroup: {
      // args
      input: NexusGenInputs['UpdateAttributesGroupInput']; // UpdateAttributesGroupInput!
    };
    updateBrand: {
      // args
      input: NexusGenInputs['UpdateBrandInput']; // UpdateBrandInput!
    };
    updateCatalogueCounters: {
      // args
      input: NexusGenInputs['CatalogueDataInput']; // CatalogueDataInput!
    };
    updateCategory: {
      // args
      input: NexusGenInputs['UpdateCategoryInput']; // UpdateCategoryInput!
    };
    updateCityInCountry: {
      // args
      input: NexusGenInputs['UpdateCityInCountryInput']; // UpdateCityInCountryInput!
    };
    updateCollectionInBrand: {
      // args
      input: NexusGenInputs['UpdateCollectionInBrandInput']; // UpdateCollectionInBrandInput!
    };
    updateCompany: {
      // args
      input: NexusGenInputs['UpdateCompanyInput']; // UpdateCompanyInput!
    };
    updateConfig: {
      // args
      input: NexusGenInputs['UpdateConfigInput']; // UpdateConfigInput!
    };
    updateCountry: {
      // args
      input: NexusGenInputs['UpdateCountryInput']; // UpdateCountryInput!
    };
    updateCurrency: {
      // args
      input: NexusGenInputs['UpdateCurrencyInput']; // UpdateCurrencyInput!
    };
    updateLanguage: {
      // args
      input: NexusGenInputs['UpdateLanguageInput']; // UpdateLanguageInput!
    };
    updateManufacturer: {
      // args
      input: NexusGenInputs['UpdateManufacturerInput']; // UpdateManufacturerInput!
    };
    updateMetric: {
      // args
      input: NexusGenInputs['UpdateMetricInput']; // UpdateMetricInput!
    };
    updateNavItem: {
      // args
      input: NexusGenInputs['UpdateNavItemInput']; // UpdateNavItemInput!
    };
    updateOptionInGroup: {
      // args
      input: NexusGenInputs['UpdateOptionInGroupInput']; // UpdateOptionInGroupInput!
    };
    updateOptionsGroup: {
      // args
      input: NexusGenInputs['UpdateOptionsGroupInput']; // UpdateOptionsGroupInput!
    };
    updateOrderStatus: {
      // args
      input: NexusGenInputs['UpdateOrderStatusInput']; // UpdateOrderStatusInput!
    };
    updateProductBrand: {
      // args
      input: NexusGenInputs['UpdateProductBrandInput']; // UpdateProductBrandInput!
    };
    updateProductBrandCollection: {
      // args
      input: NexusGenInputs['UpdateProductBrandCollectionInput']; // UpdateProductBrandCollectionInput!
    };
    updateProductCardContent: {
      // args
      input: NexusGenInputs['UpdateProductCardContentInput']; // UpdateProductCardContentInput!
    };
    updateProductInCart: {
      // args
      input: NexusGenInputs['UpdateProductInCartInput']; // UpdateProductInCartInput!
    };
    updateProductManufacturer: {
      // args
      input: NexusGenInputs['UpdateProductManufacturerInput']; // UpdateProductManufacturerInput!
    };
    updateProductNumberAttribute: {
      // args
      input: NexusGenInputs['UpdateProductNumberAttributeInput']; // UpdateProductNumberAttributeInput!
    };
    updateProductSelectAttribute: {
      // args
      input: NexusGenInputs['UpdateProductSelectAttributeInput']; // UpdateProductSelectAttributeInput!
    };
    updateProductTextAttribute: {
      // args
      input: NexusGenInputs['UpdateProductTextAttributeInput']; // UpdateProductTextAttributeInput!
    };
    updateRole: {
      // args
      input: NexusGenInputs['UpdateRoleInput']; // UpdateRoleInput!
    };
    updateRoleNav: {
      // args
      input: NexusGenInputs['UpdateRoleNavInput']; // UpdateRoleNavInput!
    };
    updateRoleRule: {
      // args
      input: NexusGenInputs['UpdateRoleRuleInput']; // UpdateRoleRuleInput!
    };
    updateRubric: {
      // args
      input: NexusGenInputs['UpdateRubricInput']; // UpdateRubricInput!
    };
    updateRubricVariant: {
      // args
      input: NexusGenInputs['UpdateRubricVariantInput']; // UpdateRubricVariantInput!
    };
    updateShop: {
      // args
      input: NexusGenInputs['UpdateShopInput']; // UpdateShopInput!
    };
    updateShopAssetIndex: {
      // args
      input: NexusGenInputs['UpdateShopAssetIndexInput']; // UpdateShopAssetIndexInput!
    };
    updateShopProductSupplier: {
      // args
      input: NexusGenInputs['UpdateShopProductSupplierInput']; // UpdateShopProductSupplierInput!
    };
    updateSupplier: {
      // args
      input: NexusGenInputs['UpdateSupplierInput']; // UpdateSupplierInput!
    };
    updateVisibleCategoriesInNavDropdown: {
      // args
      input: NexusGenInputs['UpdateVisibleCategoriesInNavDropdownInput']; // UpdateVisibleCategoriesInNavDropdownInput!
    };
  };
  Query: {
    getAllAttributesGroups: {
      // args
      excludedIds: NexusGenScalars['ObjectId'][] | null; // [ObjectId!]
    };
    getAllBrands: {
      // args
      input?: NexusGenInputs['PaginationInput'] | null; // PaginationInput
    };
    getAllCities: {
      // args
      input?: NexusGenInputs['PaginationInput'] | null; // PaginationInput
    };
    getAllCompanies: {
      // args
      input?: NexusGenInputs['PaginationInput'] | null; // PaginationInput
    };
    getAllManufacturers: {
      // args
      input?: NexusGenInputs['PaginationInput'] | null; // PaginationInput
    };
    getAllOptionsGroups: {
      // args
      excludedIds: NexusGenScalars['ObjectId'][] | null; // [ObjectId!]
    };
    getAllRubrics: {
      // args
      input: NexusGenInputs['GetAllRubricsInput'] | null; // GetAllRubricsInput
    };
    getAllShops: {
      // args
      input?: NexusGenInputs['PaginationInput'] | null; // PaginationInput
    };
    getAllSuppliers: {
      // args
      input?: NexusGenInputs['PaginationInput'] | null; // PaginationInput
    };
    getAttributesGroup: {
      // args
      _id: NexusGenScalars['ObjectId']; // ObjectId!
    };
    getBrand: {
      // args
      _id: NexusGenScalars['ObjectId']; // ObjectId!
    };
    getBrandAlphabetLists: {
      // args
      input?: NexusGenInputs['BrandAlphabetInput'] | null; // BrandAlphabetInput
    };
    getBrandBySlug: {
      // args
      slug: string; // String!
    };
    getBrandCollectionAlphabetLists: {
      // args
      input?: NexusGenInputs['BrandCollectionAlphabetInput'] | null; // BrandCollectionAlphabetInput
    };
    getCategoriesAlphabetLists: {
      // args
      input?: NexusGenInputs['CategoryAlphabetInput'] | null; // CategoryAlphabetInput
    };
    getCity: {
      // args
      _id: NexusGenScalars['ObjectId']; // ObjectId!
    };
    getCityBySlug: {
      // args
      slug: string; // String!
    };
    getCompany: {
      // args
      _id: NexusGenScalars['ObjectId']; // ObjectId!
    };
    getCompanyShops: {
      // args
      companyId: NexusGenScalars['ObjectId']; // ObjectId!
      input?: NexusGenInputs['PaginationInput'] | null; // PaginationInput
    };
    getManufacturer: {
      // args
      _id: NexusGenScalars['ObjectId']; // ObjectId!
    };
    getManufacturerAlphabetLists: {
      // args
      input?: NexusGenInputs['ManufacturerAlphabetInput'] | null; // ManufacturerAlphabetInput
    };
    getManufacturerBySlug: {
      // args
      slug: string; // String!
    };
    getOptionAlphabetLists: {
      // args
      input: NexusGenInputs['OptionAlphabetInput']; // OptionAlphabetInput!
    };
    getOptionsGroup: {
      // args
      _id: NexusGenScalars['ObjectId']; // ObjectId!
    };
    getProduct: {
      // args
      _id: NexusGenScalars['ObjectId']; // ObjectId!
    };
    getProductBySlug: {
      // args
      slug: string; // String!
    };
    getProductShops: {
      // args
      input: NexusGenInputs['GetProductShopsInput']; // GetProductShopsInput!
    };
    getProductsList: {
      // args
      input?: NexusGenInputs['ProductsPaginationInput'] | null; // ProductsPaginationInput
    };
    getRole: {
      // args
      _id: NexusGenScalars['ObjectId']; // ObjectId!
    };
    getRubric: {
      // args
      _id: NexusGenScalars['ObjectId']; // ObjectId!
    };
    getRubricBySlug: {
      // args
      slug: string; // String!
    };
    getRubricVariant: {
      // args
      _id: NexusGenScalars['ObjectId']; // ObjectId!
    };
    getShop: {
      // args
      _id: NexusGenScalars['ObjectId']; // ObjectId!
    };
    getShopBySlug: {
      // args
      slug: string; // String!
    };
    getSupplier: {
      // args
      _id: NexusGenScalars['ObjectId']; // ObjectId!
    };
    getSupplierAlphabetLists: {
      // args
      input?: NexusGenInputs['SupplierAlphabetInput'] | null; // SupplierAlphabetInput
    };
    getSupplierBySlug: {
      // args
      slug: string; // String!
    };
  };
  Rubric: {
    products: {
      // args
      input?: NexusGenInputs['ProductsPaginationInput'] | null; // ProductsPaginationInput
    };
  };
  Shop: {
    shopProducts: {
      // args
      input?: NexusGenInputs['PaginationInput'] | null; // PaginationInput
    };
  };
}

export interface NexusGenAbstractTypeMembers {
  AlphabetList:
    | 'BrandCollectionsAlphabetList'
    | 'BrandsAlphabetList'
    | 'CategoriesAlphabetList'
    | 'ManufacturersAlphabetList'
    | 'OptionsAlphabetList'
    | 'SuppliersAlphabetList';
  Base:
    | 'Brand'
    | 'BrandCollection'
    | 'CartProduct'
    | 'Company'
    | 'Manufacturer'
    | 'Order'
    | 'Product'
    | 'Shop'
    | 'Supplier'
    | 'User';
  PaginationPayload:
    | 'BrandCollectionsPaginationPayload'
    | 'BrandsPaginationPayload'
    | 'CitiesPaginationPayload'
    | 'CompaniesPaginationPayload'
    | 'ManufacturersPaginationPayload'
    | 'ShopProductsPaginationPayload'
    | 'ShopsPaginationPayload'
    | 'SuppliersPaginationPayload';
  Payload:
    | 'AttributesGroupPayload'
    | 'BrandPayload'
    | 'CategoryPayload'
    | 'CompanyPayload'
    | 'ConfigPayload'
    | 'CountryPayload'
    | 'CurrencyPayload'
    | 'LanguagePayload'
    | 'ManufacturerPayload'
    | 'MetricPayload'
    | 'NavItemPayload'
    | 'OptionsGroupPayload'
    | 'OrderStatusPayload'
    | 'ProductPayload'
    | 'RolePayload'
    | 'RoleRulePayload'
    | 'RubricPayload'
    | 'RubricVariantPayload'
    | 'ShopPayload'
    | 'ShopProductPayload'
    | 'SupplierPayload';
  Timestamp:
    | 'Brand'
    | 'BrandCollection'
    | 'Company'
    | 'Manufacturer'
    | 'Order'
    | 'OrderLog'
    | 'OrderStatus'
    | 'Product'
    | 'Role'
    | 'Shop'
    | 'ShopProduct'
    | 'ShopProductOldPrice'
    | 'Supplier'
    | 'User';
}

export interface NexusGenTypeInterfaces {
  AttributesGroupPayload: 'Payload';
  Brand: 'Base' | 'Timestamp';
  BrandCollection: 'Base' | 'Timestamp';
  BrandCollectionsAlphabetList: 'AlphabetList';
  BrandCollectionsPaginationPayload: 'PaginationPayload';
  BrandPayload: 'Payload';
  BrandsAlphabetList: 'AlphabetList';
  BrandsPaginationPayload: 'PaginationPayload';
  CartProduct: 'Base';
  CategoriesAlphabetList: 'AlphabetList';
  CategoryPayload: 'Payload';
  CitiesPaginationPayload: 'PaginationPayload';
  CompaniesPaginationPayload: 'PaginationPayload';
  Company: 'Base' | 'Timestamp';
  CompanyPayload: 'Payload';
  ConfigPayload: 'Payload';
  CountryPayload: 'Payload';
  CurrencyPayload: 'Payload';
  LanguagePayload: 'Payload';
  Manufacturer: 'Base' | 'Timestamp';
  ManufacturerPayload: 'Payload';
  ManufacturersAlphabetList: 'AlphabetList';
  ManufacturersPaginationPayload: 'PaginationPayload';
  MetricPayload: 'Payload';
  NavItemPayload: 'Payload';
  OptionsAlphabetList: 'AlphabetList';
  OptionsGroupPayload: 'Payload';
  Order: 'Base' | 'Timestamp';
  OrderLog: 'Timestamp';
  OrderStatus: 'Timestamp';
  OrderStatusPayload: 'Payload';
  Product: 'Base' | 'Timestamp';
  ProductPayload: 'Payload';
  Role: 'Timestamp';
  RolePayload: 'Payload';
  RoleRulePayload: 'Payload';
  RubricPayload: 'Payload';
  RubricVariantPayload: 'Payload';
  Shop: 'Base' | 'Timestamp';
  ShopPayload: 'Payload';
  ShopProduct: 'Timestamp';
  ShopProductOldPrice: 'Timestamp';
  ShopProductPayload: 'Payload';
  ShopProductsPaginationPayload: 'PaginationPayload';
  ShopsPaginationPayload: 'PaginationPayload';
  Supplier: 'Base' | 'Timestamp';
  SupplierPayload: 'Payload';
  SuppliersAlphabetList: 'AlphabetList';
  SuppliersPaginationPayload: 'PaginationPayload';
  User: 'Base' | 'Timestamp';
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = keyof NexusGenInterfaces;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType =
  | 'AlphabetList'
  | 'Base'
  | 'PaginationPayload'
  | 'Payload'
  | 'Timestamp';

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    resolveType: true;
    __typename: false;
    isTypeOf: false;
  };
};

export interface NexusGenTypes {
  context: NexusContext;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes:
    | NexusGenTypes['inputNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['scalarNames'];
  allOutputTypes:
    | NexusGenTypes['objectNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['unionNames']
    | NexusGenTypes['interfaceNames']
    | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes'];
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {}
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {}
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {}
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {}
  interface NexusGenPluginSchemaConfig {}
  interface NexusGenPluginArgConfig {}
}
