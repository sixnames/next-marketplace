### This file was generated by Nexus Schema
### Do not make changes to this file directly

input AddAttributeToGroupInput {
  attributesGroupId: ObjectId!
  metricId: ObjectId
  nameI18n: JSONObject!
  optionsGroupId: ObjectId
  positioningInTitle: JSONObject
  variant: AttributeVariant!
  viewVariant: AttributeViewVariant!
}

input AddAttributesGroupToRubricInput {
  attributesGroupId: ObjectId!
  rubricId: ObjectId!
}

input AddCityToCountryInput {
  countryId: ObjectId!
  nameI18n: JSONObject!
  slug: String!
}

input AddCollectionToBrandInput {
  brandId: ObjectId!
  descriptionI18n: JSONObject
  nameI18n: JSONObject!
}

input AddOptionToGroupInput {
  color: String
  gender: Gender!
  icon: String
  nameI18n: JSONObject!
  optionsGroupId: ObjectId!
  parentOptionId: ObjectId
  variants: JSONObject!
}

input AddProductAssetsInput {
  assets: [Upload!]!
  productId: ObjectId!
}

input AddProductToCartInput {
  amount: Int!
  shopProductId: ObjectId!
}

input AddProductToConnectionInput {
  addProductId: ObjectId!
  connectionId: ObjectId!
  productId: ObjectId!
}

input AddProductToShopInput {
  available: Int!
  price: Int!
  productId: ObjectId!
  shopId: ObjectId!
}

input AddShopAssetsInput {
  assets: [Upload!]!
  shopId: ObjectId!
}

input AddShopToCartProductInput {
  cartProductId: ObjectId!
  shopProductId: ObjectId!
}

input AddShopToCompanyInput {
  address: AddressInput!
  assets: [Upload!]!
  citySlug: String!
  companyId: ObjectId!
  contacts: ContactsInput!
  logo: [Upload!]!
  name: String!
}

input AddShoplessProductToCartInput {
  amount: Int!
  productId: ObjectId!
}

type Address {
  formattedAddress: String!
  formattedCoordinates: Coordinates!
  point: PointGeoJSON!
}

input AddressInput {
  formattedAddress: String!
  point: CoordinatesInput!
}

type Asset {
  index: Int!
  url: String!
}

type Attribute {
  _id: ObjectId!
  metric: Metric
  name: String!
  nameI18n: JSONObject!
  options: [Option!]!
  optionsGroup: OptionsGroup
  optionsGroupId: ObjectId
  positioningInTitle: JSONObject
  slug: String
  variant: AttributeVariant!
  viewVariant: AttributeViewVariant!
}

"""
Attribute position in catalogue title enum.
"""
enum AttributePositionInTitle {
  afterKeyword
  beforeKeyword
  begin
  end
  replaceKeyword
}

"""
Attribute variant enum.
"""
enum AttributeVariant {
  multipleSelect
  number
  select
  string
}

"""
Attribute view in product card variant enum.
"""
enum AttributeViewVariant {
  icon
  list
  outerRating
  tag
  text
}

type AttributesGroup {
  _id: ObjectId!
  attributes: [Attribute!]!
  attributesIds: [ObjectId!]!
  name: String!
  nameI18n: JSONObject!
}

type AttributesGroupPayload implements Payload {
  message: String!
  payload: AttributesGroup
  success: Boolean!
}

interface Base {
  _id: ObjectId!
  itemId: String!
}

type Brand implements Base & Timestamp {
  _id: ObjectId!
  collections(input: PaginationInput): BrandCollectionsPaginationPayload!
  collectionsIds: [ObjectId!]!
  collectionsList: [BrandCollection!]!
  createdAt: Date!
  description: String
  descriptionI18n: JSONObject
  itemId: String!
  name: String!
  nameI18n: String!
  slug: String!
  updatedAt: Date!
  url: [URL!]
}

type BrandCollection implements Base & Timestamp {
  _id: ObjectId!
  createdAt: Date!
  description: String
  descriptionI18n: JSONObject
  itemId: String!
  name: String!
  nameI18n: JSONObject!
  slug: String!
  updatedAt: Date!
}

type BrandCollectionsPaginationPayload implements PaginationPayload {
  docs: [BrandCollection!]!
  hasNextPage: Boolean!
  hasPrevPage: Boolean!
  limit: Int!
  page: Int!
  sortBy: String!
  sortDir: SortDirection!
  totalActiveDocs: Int!
  totalDocs: Int!
  totalPages: Int!
}

type BrandPayload implements Payload {
  message: String!
  payload: Brand
  success: Boolean!
}

type BrandsPaginationPayload implements PaginationPayload {
  docs: [Brand!]!
  hasNextPage: Boolean!
  hasPrevPage: Boolean!
  limit: Int!
  page: Int!
  sortBy: String!
  sortDir: SortDirection!
  totalActiveDocs: Int!
  totalDocs: Int!
  totalPages: Int!
}

type Cart {
  _id: ObjectId!
  cartProducts: [CartProduct!]!
  formattedTotalPrice: String!
  isWithShopless: Boolean!
  productsCount: Int!
  totalPrice: Int!
}

type CartPayload implements Payload {
  message: String!
  payload: Cart
  success: Boolean!
}

type CartProduct implements Base {
  _id: ObjectId!
  amount: Int!
  formattedTotalPrice: String!
  isShopless: Boolean!
  itemId: String!
  product: Product
  productId: ObjectId
  shopProduct: ShopProduct
  shopProductId: ObjectId
  totalPrice: Int!
}

input CatalogueAdditionalAttributesInput {
  filter: [String!]!
  shownAttributesSlugs: [String!]!
}

type CatalogueData {
  _id: ObjectId!
  attributes: [CatalogueFilterAttribute!]!
  catalogueTitle: String!
  clearSlug: String!
  filter: [String!]!
  hasMore: Boolean!
  lastProductId: ObjectId
  products: [Product!]!
  rubric: Rubric!
  selectedAttributes: [CatalogueFilterAttribute!]!
  totalProducts: Int!
}

input CatalogueDataInput {
  filter: [String!]!
  lastProductId: ObjectId
}

type CatalogueFilterAttribute {
  _id: ObjectId!
  clearSlug: String!
  isSelected: Boolean!
  name: String!
  options: [CatalogueFilterAttributeOption!]!
  slug: String!
}

type CatalogueFilterAttributeOption {
  _id: ObjectId!
  isSelected: Boolean!
  name: String!
  nextSlug: String!
  slug: String!
}

type CatalogueSearchResult {
  products: [Product!]!
  rubrics: [Rubric!]!
}

type CitiesPaginationPayload implements PaginationPayload {
  docs: [City!]!
  hasNextPage: Boolean!
  hasPrevPage: Boolean!
  limit: Int!
  page: Int!
  sortBy: String!
  sortDir: SortDirection!
  totalActiveDocs: Int!
  totalDocs: Int!
  totalPages: Int!
}

type City {
  _id: ObjectId!
  name: String!
  nameI18n: JSONObject!
  slug: String!
}

type CompaniesPaginationPayload implements PaginationPayload {
  docs: [Company!]!
  hasNextPage: Boolean!
  hasPrevPage: Boolean!
  limit: Int!
  page: Int!
  sortBy: String!
  sortDir: SortDirection!
  totalActiveDocs: Int!
  totalDocs: Int!
  totalPages: Int!
}

type Company implements Base & Timestamp {
  _id: ObjectId!
  contacts: Contacts!
  createdAt: Date!
  itemId: String!
  logo: Asset!
  name: String!
  owner: User!
  ownerId: ObjectId!
  shops(input: PaginationInput): ShopsPaginationPayload!
  shopsIds: [ObjectId!]!
  slug: String!
  staff: [User!]!
  staffIds: [ObjectId!]!
  updatedAt: Date!
}

type CompanyPayload implements Payload {
  message: String!
  payload: Company
  success: Boolean!
}

type Config {
  _id: ObjectId!

  """
  Accepted formats for asset config
  """
  acceptedFormats: [String!]!

  """
  Each key is city slug with value for current city.
  Each city contains object with key as locale and value for current locale
  """
  cities: JSONObject!
  description: String

  """
  Set to true if config is able to hold multiple values.
  """
  multi: Boolean!
  name: String!

  """
  Returns first value of current city and locale.
  """
  singleValue: String!
  slug: String!

  """
  Returns current value of current city and locale.
  """
  value: [String!]!
  variant: ConfigVariant
}

type ConfigPayload implements Payload {
  message: String!
  payload: Config
  success: Boolean!
}

"""
Site config variant enum.
"""
enum ConfigVariant {
  asset
  email
  number
  string
  tel
}

type Contacts {
  emails: [EmailAddress!]!
  formattedPhones: [FormattedPhone!]!
  phones: [PhoneNumber!]!
}

input ContactsInput {
  emails: [EmailAddress!]!
  phones: [PhoneNumber!]!
}

type Coordinates {
  lat: Float!
  lng: Float!
}

input CoordinatesInput {
  lat: Float!
  lng: Float!
}

type Country {
  _id: ObjectId!
  cities: [City!]!
  citiesIds: [ObjectId!]!
  currency: String!
  name: String!
}

type CountryPayload implements Payload {
  message: String!
  payload: Country
  success: Boolean!
}

input CreateAttributesGroupInput {
  nameI18n: JSONObject!
}

input CreateBrandInput {
  descriptionI18n: JSONObject
  nameI18n: JSONObject!
  url: [URL!]
}

input CreateCompanyInput {
  contacts: ContactsInput!
  logo: [Upload!]!
  name: String!
  ownerId: ObjectId!
  staffIds: [ObjectId!]!
}

input CreateCountryInput {
  currency: String!
  name: String!
}

input CreateCurrencyInput {
  name: String!
}

input CreateLanguageInput {
  name: String!
  nativeName: String!
  slug: String!
}

input CreateManufacturerInput {
  descriptionI18n: JSONObject
  nameI18n: JSONObject!
  url: [URL!]
}

input CreateMetricInput {
  nameI18n: JSONObject!
}

input CreateOptionsGroupInput {
  nameI18n: JSONObject!
  variant: OptionsGroupVariant!
}

input CreateProductConnectionInput {
  attributeId: ObjectId!
  productId: ObjectId!
}

input CreateProductInput {
  active: Boolean!
  assets: [Upload!]!
  attributes: [ProductAttributeInput!]!
  brandCollectionSlug: String
  brandSlug: String
  descriptionI18n: JSONObject!
  manufacturerSlug: String
  nameI18n: JSONObject!
  originalName: String!
  rubricId: ObjectId!
}

input CreateRoleInput {
  description: String
  isStuff: Boolean!
  nameI18n: JSONObject!
}

input CreateRubricInput {
  catalogueTitle: RubricCatalogueTitleInput!
  descriptionI18n: JSONObject!
  nameI18n: JSONObject!
  shortDescriptionI18n: JSONObject!
  variantId: ObjectId!
}

input CreateRubricVariantInput {
  nameI18n: JSONObject!
}

input CreateUserInput {
  email: EmailAddress!
  lastName: String
  name: String!
  phone: PhoneNumber!
  roleId: ObjectId!
  secondName: String
}

type Currency {
  _id: ObjectId!
  name: String!
}

type CurrencyPayload implements Payload {
  message: String!
  payload: Currency
  success: Boolean!
}

"""
Date custom scalar type
"""
scalar Date

input DeleteAttributeFromGroupInput {
  attributeId: ObjectId!
  attributesGroupId: ObjectId!
}

input DeleteAttributesGroupFromRubricInput {
  attributesGroupId: ObjectId!
  rubricId: ObjectId!
}

input DeleteCityFromCountryInput {
  cityId: ObjectId!
  countryId: ObjectId!
}

input DeleteCollectionFromBrandInput {
  brandCollectionId: ObjectId!
  brandId: ObjectId!
}

input DeleteOptionFromGroupInput {
  optionId: ObjectId!
  optionsGroupId: ObjectId!
}

input DeleteProductAssetInput {
  assetIndex: Int!
  productId: ObjectId!
}

input DeleteProductFromCartInput {
  cartProductId: ObjectId!
}

input DeleteProductFromConnectionInput {
  connectionId: ObjectId!
  deleteProductId: ObjectId!
  productId: ObjectId!
}

input DeleteProductFromRubricInput {
  productId: ObjectId!
  rubricId: ObjectId!
}

input DeleteProductFromShopInput {
  shopId: ObjectId!
  shopProductId: ObjectId!
}

input DeleteShopAssetInput {
  assetIndex: Int!
  shopId: ObjectId!
}

input DeleteShopFromCompanyInput {
  companyId: ObjectId!
  shopId: ObjectId!
}

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress

type FormattedPhone {
  raw: String!
  readable: String!
}

"""
Gender enum.
"""
enum Gender {
  he
  it
  she
}

input GetAllRubricsInput {
  excludedRubricsIds: [ObjectId!]
}

input GetProductShopsInput {
  productId: ObjectId!
  sortBy: String = "price"
  sortDir: SortDirection = DESC
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type Language {
  _id: ObjectId!
  name: String!
  nativeName: String!
  slug: String!
}

type LanguagePayload implements Payload {
  message: String!
  payload: Language
  success: Boolean!
}

input MakeAnOrderInput {
  comment: String
  email: EmailAddress!
  name: String!
  phone: PhoneNumber!
}

type MakeAnOrderPayload implements Payload {
  cart: Cart
  message: String!
  order: Order
  success: Boolean!
}

type Manufacturer implements Base & Timestamp {
  _id: ObjectId!
  createdAt: Date!
  description: String
  descriptionI18n: JSONObject
  itemId: String!
  name: String!
  nameI18n: JSONObject!
  slug: String!
  updatedAt: Date!
  url: [URL!]
}

type ManufacturerPayload implements Payload {
  message: String!
  payload: Manufacturer
  success: Boolean!
}

type ManufacturersPaginationPayload implements PaginationPayload {
  docs: [Manufacturer!]!
  hasNextPage: Boolean!
  hasPrevPage: Boolean!
  limit: Int!
  page: Int!
  sortBy: String!
  sortDir: SortDirection!
  totalActiveDocs: Int!
  totalDocs: Int!
  totalPages: Int!
}

type Message {
  _id: ObjectId!

  """
  Returns message for current locale
  """
  message: String!
  messageI18n: JSONObject!
  slug: String!
}

type MessagesGroup {
  _id: ObjectId!

  """
  Returns all messages for current current group
  """
  messages: [Message!]!
  messagesIds: [ObjectId!]!
  name: String!
}

type Metric {
  _id: ObjectId!
  name: String!
  nameI18n: JSONObject!
}

type MetricPayload implements Payload {
  message: String!
  payload: Metric
  success: Boolean!
}

type MetricsPaginationPayload implements PaginationPayload {
  docs: [Metric!]!
  hasNextPage: Boolean!
  hasPrevPage: Boolean!
  limit: Int!
  page: Int!
  sortBy: String!
  sortDir: SortDirection!
  totalActiveDocs: Int!
  totalDocs: Int!
  totalPages: Int!
}

type Mutation {
  """
  Should create attribute and add it to the attributes group
  """
  addAttributeToGroup(input: AddAttributeToGroupInput!): AttributesGroupPayload!

  """
  Should add attributes group to the rubric
  """
  addAttributesGroupToRubric(input: AddAttributesGroupToRubricInput!): RubricPayload!

  """
  Should create city and add it to the country
  """
  addCityToCountry(input: AddCityToCountryInput!): CountryPayload!

  """
  Should add brand collection to the brand
  """
  addCollectionToBrand(input: AddCollectionToBrandInput!): BrandPayload!

  """
  Should add option to the group
  """
  addOptionToGroup(input: AddOptionToGroupInput!): OptionsGroupPayload!

  """
  Should add product assets
  """
  addProductAssets(input: AddProductAssetsInput!): ProductPayload!

  """
  Should add product to the cart or should increase product amount if already exist in cart
  """
  addProductToCart(input: AddProductToCartInput!): CartPayload!

  """
  Should create product connection
  """
  addProductToConnection(input: AddProductToConnectionInput!): ProductPayload!

  """
  Should add product to the shop
  """
  addProductToShop(input: AddProductToShopInput!): ShopPayload!

  """
  Should add shop assets
  """
  addShopAssets(input: AddShopAssetsInput!): ShopPayload!

  """
  Should add shop to the cart product
  """
  addShopToCartProduct(input: AddShopToCartProductInput!): CartPayload!

  """
  Should create shop and add it to the company
  """
  addShopToCompany(input: AddShopToCompanyInput!): CompanyPayload!

  """
  Should add shopless product to the cart or should increase product amount if already exist in cart
  """
  addShoplessProductToCart(input: AddShoplessProductToCartInput!): CartPayload!

  """
  Should delete all products from cart
  """
  clearCart: CartPayload!

  """
  Should create attributes group
  """
  createAttributesGroup(input: CreateAttributesGroupInput!): AttributesGroupPayload!

  """
  Should create brand
  """
  createBrand(input: CreateBrandInput!): BrandPayload!

  """
  Should create company
  """
  createCompany(input: CreateCompanyInput!): CompanyPayload!

  """
  Should create country
  """
  createCountry(input: CreateCountryInput!): CountryPayload!

  """
  Should create currency
  """
  createCurrency(input: CreateCurrencyInput!): CurrencyPayload!

  """
  Should create language
  """
  createLanguage(input: CreateLanguageInput!): LanguagePayload!

  """
  Should create manufacturer
  """
  createManufacturer(input: CreateManufacturerInput!): ManufacturerPayload!

  """
  Should create metric
  """
  createMetric(input: CreateMetricInput!): MetricPayload!

  """
  Should create options group
  """
  createOptionsGroup(input: CreateOptionsGroupInput!): OptionsGroupPayload!

  """
  Should create product
  """
  createProduct(input: CreateProductInput!): ProductPayload!

  """
  Should create product connection
  """
  createProductConnection(input: CreateProductConnectionInput!): ProductPayload!

  """
  Should create role
  """
  createRole(input: CreateRoleInput!): RolePayload!

  """
  Should create rubric
  """
  createRubric(input: CreateRubricInput!): RubricPayload!

  """
  Should create rubric variant
  """
  createRubricVariant(input: CreateRubricVariantInput!): RubricVariantPayload!

  """
  Should create user
  """
  createUser(input: CreateUserInput!): UserPayload!

  """
  Should delete attribute from the attributes group
  """
  deleteAttributeFromGroup(input: DeleteAttributeFromGroupInput!): AttributesGroupPayload!

  """
  Should delete attributes group
  """
  deleteAttributesGroup(_id: ObjectId!): AttributesGroupPayload!

  """
  Should delete attributes group from rubric
  """
  deleteAttributesGroupFromRubric(input: DeleteAttributesGroupFromRubricInput!): RubricPayload!

  """
  Should delete brand
  """
  deleteBrand(_id: ObjectId!): BrandPayload!

  """
  Should delete city
  """
  deleteCityFromCountry(input: DeleteCityFromCountryInput!): CountryPayload!

  """
  Should delete brand collection from brand
  """
  deleteCollectionFromBrand(input: DeleteCollectionFromBrandInput!): BrandPayload!

  """
  Should delete company
  """
  deleteCompany(_id: ObjectId!): CompanyPayload!

  """
  Should delete country
  """
  deleteCountry(_id: ObjectId!): CountryPayload!

  """
  Should delete currency
  """
  deleteCurrency(_id: ObjectId!): CurrencyPayload!

  """
  Should delete language
  """
  deleteLanguage(_id: ObjectId!): LanguagePayload!

  """
  Should delete manufacturer
  """
  deleteManufacturer(_id: ObjectId!): ManufacturerPayload!

  """
  Should delete metric
  """
  deleteMetric(_id: ObjectId!): MetricPayload!

  """
  Should delete option from the group
  """
  deleteOptionFromGroup(input: DeleteOptionFromGroupInput!): OptionsGroupPayload!

  """
  Should delete options group
  """
  deleteOptionsGroup(_id: ObjectId!): OptionsGroupPayload!

  """
  Should update product assets
  """
  deleteProductAsset(input: DeleteProductAssetInput!): ProductPayload!

  """
  Should delete product from cart
  """
  deleteProductFromCart(input: DeleteProductFromCartInput!): CartPayload!

  """
  Should create product connection
  """
  deleteProductFromConnection(input: DeleteProductFromConnectionInput!): ProductPayload!

  """
  Should remove product from rubric
  """
  deleteProductFromRubric(input: DeleteProductFromRubricInput!): RubricPayload!

  """
  Should delete product from shop
  """
  deleteProductFromShop(input: DeleteProductFromShopInput!): ShopPayload!

  """
  Should delete role
  """
  deleteRole(_id: ObjectId!): RolePayload!

  """
  Should delete rubric
  """
  deleteRubric(_id: ObjectId!): RubricPayload!

  """
  Should delete rubric variant
  """
  deleteRubricVariant(_id: ObjectId!): RubricVariantPayload!

  """
  Should delete shop asset
  """
  deleteShopAsset(input: DeleteShopAssetInput!): ShopPayload!

  """
  Should delete shop from company and db
  """
  deleteShopFromCompany(input: DeleteShopFromCompanyInput!): CompanyPayload!

  """
  Should create order from session cart
  """
  makeAnOrder(input: MakeAnOrderInput!): MakeAnOrderPayload!

  """
  Should add all products to the cart from user's old order
  """
  repeatOrder(input: RepeatOrderInput!): CartPayload!

  """
  Should sign up user
  """
  signUp(input: SignUpInput!): UserPayload!

  """
  Should toggle attribute in the rubric attribute showInCatalogueFilter field
  """
  toggleAttributeInRubricCatalogue(input: UpdateAttributeInRubricInput!): RubricPayload!

  """
  Should toggle attribute in the rubric attribute showInCatalogueNav field
  """
  toggleAttributeInRubricNav(input: UpdateAttributeInRubricInput!): RubricPayload!

  """
  Should asset update config
  """
  updateAssetConfig(input: UpdateAssetConfigInput!): ConfigPayload!

  """
  Should update attribute in the attributes group
  """
  updateAttributeInGroup(input: UpdateAttributeInGroupInput!): AttributesGroupPayload!

  """
  Should update attributes group
  """
  updateAttributesGroup(input: UpdateAttributesGroupInput!): AttributesGroupPayload!

  """
  Should update brand
  """
  updateBrand(input: UpdateBrandInput!): BrandPayload!

  """
  Should update catalogue counters
  """
  updateCatalogueCounters(input: CatalogueDataInput!): Boolean!

  """
  Should update city
  """
  updateCityInCountry(input: UpdateCityInCountryInput!): CountryPayload!

  """
  Should update brand collection in the brand
  """
  updateCollectionInBrand(input: UpdateCollectionInBrandInput!): BrandPayload!

  """
  Should update company
  """
  updateCompany(input: UpdateCompanyInput!): CompanyPayload!

  """
  Should update company logo
  """
  updateCompanyLogo(input: UpdateCompanyLogoInput!): CompanyPayload!

  """
  Should update config
  """
  updateConfig(input: UpdateConfigInput!): ConfigPayload!

  """
  Should update country
  """
  updateCountry(input: UpdateCountryInput!): CountryPayload!

  """
  Should update currency
  """
  updateCurrency(input: UpdateCurrencyInput!): CurrencyPayload!

  """
  Should update language
  """
  updateLanguage(input: UpdateLanguageInput!): LanguagePayload!

  """
  Should update manufacturer
  """
  updateManufacturer(input: UpdateManufacturerInput!): ManufacturerPayload!

  """
  Should update metric
  """
  updateMetric(input: UpdateMetricInput!): MetricPayload!

  """
  Should update session user password
  """
  updateMyPassword(input: UpdateMyPasswordInput!): UserPayload!

  """
  Should update session user profile
  """
  updateMyProfile(input: UpdateMyProfileInput!): UserPayload!

  """
  Should update option in the group
  """
  updateOptionInGroup(input: UpdateOptionInGroupInput!): OptionsGroupPayload!

  """
  Should update options group
  """
  updateOptionsGroup(input: UpdateOptionsGroupInput!): OptionsGroupPayload!

  """
  Should update product
  """
  updateProduct(input: UpdateProductInput!): ProductPayload!

  """
  Should update product asset index
  """
  updateProductAssetIndex(input: UpdateProductAssetIndexInput!): ProductPayload!

  """
  Should update product counter
  """
  updateProductCounter(input: UpdateProductCounterInput!): Boolean!

  """
  Should update cart product amount
  """
  updateProductInCart(input: UpdateProductInCartInput!): CartPayload!

  """
  Should update role
  """
  updateRole(input: UpdateRoleInput!): RolePayload!

  """
  Should update rubric
  """
  updateRubric(input: UpdateRubricInput!): RubricPayload!

  """
  Should update rubric variant
  """
  updateRubricVariant(input: UpdateRubricVariantInput!): RubricVariantPayload!

  """
  Should update shop
  """
  updateShop(input: UpdateShopInput!): ShopPayload!

  """
  Should update shop asset index
  """
  updateShopAssetIndex(input: UpdateShopAssetIndexInput!): ShopPayload!

  """
  Should update shop logo
  """
  updateShopLogo(input: UpdateShopLogoInput!): ShopPayload!

  """
  Should update shop product
  """
  updateShopProduct(input: UpdateShopProductInput!): ShopProductPayload!

  """
  Should update user
  """
  updateUser(input: UpdateUserInput!): UserPayload!
}

type NavItem {
  _id: ObjectId!
  appNavigationChildren: [NavItem!]!
  children: [NavItem!]!
  icon: String
  index: Int!
  name: String!
  nameI18n: JSONObject!
  navGroup: String!
  parentId: ObjectId
  path: String
  slug: String!
}

"""
Mongo object id scalar type
"""
scalar ObjectId

type Option {
  _id: ObjectId!
  color: String
  gender: Gender
  icon: String
  name: String!
  nameI18n: JSONObject!
  options: [Option!]!
  slug: String!
  variants: JSONObject!
}

input OptionVariantInput {
  gender: Gender!
  value: JSONObject!
}

type OptionsGroup {
  _id: ObjectId!
  name: String!
  nameI18n: JSONObject!
  options: [Option!]!
  variant: OptionsGroupVariant!
}

type OptionsGroupPayload implements Payload {
  message: String!
  payload: OptionsGroup
  success: Boolean!
}

"""
Options group variant enum.
"""
enum OptionsGroupVariant {
  color
  icon
  text
}

type Order implements Base & Timestamp {
  _id: ObjectId!
  comment: String
  createdAt: Date!
  customer: OrderCustomer!
  formattedTotalPrice: String!
  itemId: String!
  logs: [OrderLog!]!
  products: [OrderProduct!]!
  productsCount: Int!
  status: OrderStatus!
  statusId: ObjectId!
  totalPrice: Int!
  updatedAt: Date!
}

type OrderCustomer {
  _id: ObjectId!
  email: EmailAddress!
  formattedPhone: FormattedPhone!
  fullName: String!
  itemId: Int!
  lastName: String
  name: String!
  phone: PhoneNumber!
  secondName: String
  shortName: String!
  user: User
  userId: ObjectId!
}

type OrderLog implements Timestamp {
  _id: ObjectId!
  createdAt: Date!
  updatedAt: Date!
  user: User
  userId: ObjectId!
  variant: OrderLogVariant!
}

"""
Order log variant enum.
"""
enum OrderLogVariant {
  status
}

type OrderPayload implements Payload {
  message: String!
  payload: Order
  success: Boolean!
}

type OrderProduct {
  _id: ObjectId!
  amount: Int!
  company: Company
  companyId: ObjectId!
  description: String!
  descriptionI18n: JSONObject!
  discountedPercent: Int
  formattedOldPrice: String
  formattedPrice: String!
  formattedTotalPrice: String!
  itemId: Int!
  name: String!
  nameI18n: JSONObject!
  oldPrices: [ShopProductOldPrice!]!
  originalName: String!
  price: Int!
  product: Product
  productId: ObjectId!
  shop: Shop
  shopId: ObjectId!
  shopProduct: ShopProduct
  shopProductId: ObjectId!
  slug: String!
  totalPrice: Int!
}

type OrderStatus implements Timestamp {
  _id: ObjectId!
  color: String!
  createdAt: Date!
  name: String!
  nameI18n: JSONObject!
  slug: String!
  updatedAt: Date!
}

type OrdersPaginationPayload implements PaginationPayload {
  docs: [Order!]!
  hasNextPage: Boolean!
  hasPrevPage: Boolean!
  limit: Int!
  page: Int!
  sortBy: String!
  sortDir: SortDirection!
  totalActiveDocs: Int!
  totalDocs: Int!
  totalPages: Int!
}

input PaginationInput {
  limit: Int = 30
  page: Int = 1
  search: String
  sortBy: String = "createdAt"
  sortDir: SortDirection = DESC
}

interface PaginationPayload {
  hasNextPage: Boolean!
  hasPrevPage: Boolean!
  limit: Int!
  page: Int!
  sortBy: String!
  sortDir: SortDirection!
  totalActiveDocs: Int!
  totalDocs: Int!
  totalPages: Int!
}

interface Payload {
  message: String!
  success: Boolean!
}

"""
A field whose value conforms to the standard E.164 format as specified in: https://en.wikipedia.org/wiki/E.164. Basically this is +17895551234.
"""
scalar PhoneNumber

type PointGeoJSON {
  """
  Coordinates that specifies the object’s coordinates. If specifying latitude and longitude coordinates, list the longitude first and then latitude.
  """
  coordinates: [Float!]!

  """
  Field that specifies the GeoJSON object type.
  """
  type: String!
}

type Product implements Base & Timestamp {
  _id: ObjectId!
  active: Boolean!

  """
  Returns all shop products that product connected to
  """
  allShopProducts: [ShopProduct!]!
  assets: [Asset!]!
  attributes: [ProductAttribute!]!
  brand: Brand
  brandCollection: BrandCollection
  brandCollectionSlug: String
  brandSlug: String

  """
  Should return product card breadcrumbs configs list for product card page
  """
  cardBreadcrumbs(slug: [String!]!): [ProductCardBreadcrumb!]!

  """
  Should find all connected shop products and return minimal and maximal price.
  """
  cardPrices: ProductCardPrices!

  """
  Returns shop products of session city for product card page
  """
  cardShopProducts: [ShopProduct!]!
  connections: [ProductConnection!]!
  createdAt: Date!
  description: String!
  descriptionI18n: JSONObject!
  iconFeatures: [ProductAttribute!]!
  itemId: String!
  listFeatures: [ProductAttribute!]!
  mainImage: String!
  manufacturer: Manufacturer
  manufacturerSlug: String
  maxPrice: Int!
  minPrice: Int!
  name: String!
  nameI18n: JSONObject!
  originalName: String!
  priorities: JSONObject!
  ratingFeatures: [ProductAttribute!]!
  rubricId: ObjectId!
  rubrics: [Rubric!]!
  shopsCount: Int!
  slug: String!
  tagFeatures: [ProductAttribute!]!
  textFeatures: [ProductAttribute!]!
  updatedAt: Date!
  views: JSONObject!
}

type ProductAttribute {
  _id: ObjectId!
  attribute: Attribute!
  attributeId: ObjectId!
  attributeName: String!
  attributeNameI18n: JSONObject!
  attributeSlug: String!
  attributeVariant: AttributeVariant!
  attributeViewVariant: AttributeViewVariant!
  number: Float
  readableValue: String
  selectedOptions: [Option!]!

  """
  List of selected options slug
  """
  selectedOptionsSlugs: [String!]!
  showAsBreadcrumb: Boolean!
  showInCard: Boolean!
  text: String!
  textI18n: JSONObject
}

input ProductAttributeInput {
  _id: ObjectId!
  attributeId: ObjectId!
  attributeNameI18n: JSONObject!
  attributeSlug: String!
  attributeVariant: AttributeVariant!
  attributeViewVariant: AttributeViewVariant!
  number: Float

  """
  List of selected options slug
  """
  selectedOptionsSlugs: [String!]!
  showAsBreadcrumb: Boolean!
  showInCard: Boolean!
  textI18n: JSONObject
}

input ProductAttributesASTInput {
  productId: ObjectId
  rubricId: ObjectId!
}

type ProductAttributesGroupAst implements Base {
  _id: ObjectId!
  astAttributes: [ProductAttribute!]!
  attributes: [Attribute!]!
  attributesIds: [ObjectId!]!
  itemId: String!
  name: String!
  nameI18n: JSONObject!
}

type ProductCardBreadcrumb {
  _id: ObjectId!
  href: String!
  name: String!
}

type ProductCardPrices {
  _id: ObjectId!
  max: String!
  min: String!
}

type ProductConnection {
  _id: ObjectId!
  attributeId: ObjectId!
  attributeName: String!
  attributeNameI18n: JSONObject
  attributeSlug: String!
  attributeVariant: AttributeVariant!
  attributeViewVariant: AttributeViewVariant!
  connectionProducts: [ProductConnectionItem!]!
}

type ProductConnectionItem {
  _id: ObjectId!
  option: Option!
  product: Product!
  productId: ObjectId!
}

type ProductPayload implements Payload {
  message: String!
  payload: Product
  success: Boolean!
}

input ProductsPaginationInput {
  """
  Filter by current attributes
  """
  attributesIds: [ObjectId!]

  """
  Exclude current products
  """
  excludedProductsIds: [ObjectId!]

  """
  Exclude products in current rubrics
  """
  excludedRubricsIds: [ObjectId!]

  """
  Returns products not added to any rubric.
  """
  isWithoutRubrics: Boolean
  limit: Int = 30
  maxPrice: Int
  minPrice: Int
  page: Int = 1

  """
  Filter by current rubrics
  """
  rubricId: ObjectId
  search: String
  sortBy: String = "createdAt"
  sortDir: SortDirection = DESC
}

type ProductsPaginationPayload {
  docs: [Product!]!
  hasNextPage: Boolean!
  hasPrevPage: Boolean!
  limit: Int!
  maxPrice: Int!
  minPrice: Int!
  page: Int!
  sortBy: String!
  sortDir: SortDirection!
  totalActiveDocs: Int!
  totalDocs: Int!
  totalPages: Int!
}

type Query {
  """
  Should return all app nav items
  """
  getAllAppNavItems: [NavItem!]!
  getAllAttributesGroups(excludedIds: [ObjectId!] = []): [AttributesGroup!]!

  """
  Should return paginated brands
  """
  getAllBrands(input: PaginationInput): BrandsPaginationPayload

  """
  Should return paginated cities
  """
  getAllCities(input: PaginationInput): CitiesPaginationPayload!

  """
  Should return all cms nav items
  """
  getAllCmsNavItems: [NavItem!]!

  """
  Should return paginated companies
  """
  getAllCompanies(input: PaginationInput): CompaniesPaginationPayload
  getAllConfigs: [Config!]!

  """
  Should return countries list
  """
  getAllCountries: [Country!]!
  getAllCurrencies: [Currency!]!

  """
  Should all languages list
  """
  getAllLanguages: [Language!]!

  """
  Should return paginated manufacturers
  """
  getAllManufacturers(input: PaginationInput): ManufacturersPaginationPayload!

  """
  Should return paginated metrics
  """
  getAllMetrics(input: PaginationInput): PaginationPayload!

  """
  Should return all metrics list
  """
  getAllMetricsOptions: [Metric!]!

  """
  Should return all paginated orders
  """
  getAllMyOrders(input: PaginationInput): OrdersPaginationPayload

  """
  Should return options groups list
  """
  getAllOptionsGroups: [OptionsGroup!]!

  """
  Should return all paginated orders
  """
  getAllOrders(input: PaginationInput): OrdersPaginationPayload!

  """
  Should return all roles list
  """
  getAllRoles: [Role!]!

  """
  Should return rubric variants list
  """
  getAllRubricVariants: [RubricVariant!]!

  """
  Should return rubrics tree
  """
  getAllRubrics(input: GetAllRubricsInput = {}): [Rubric!]!

  """
  Should return shop by given slug
  """
  getAllShops(input: PaginationInput): ShopsPaginationPayload!

  """
  Should return paginated users
  """
  getAllUsers(input: PaginationInput): UsersPaginationPayload!

  """
  Should return attribute positioning options
  """
  getAttributePositioningOptions: [SelectOption!]!

  """
  Should return attribute variants options
  """
  getAttributeVariantsOptions: [SelectOption!]!

  """
  Should return attribute view variants options
  """
  getAttributeViewVariantsOptions: [SelectOption!]!
  getAttributesGroup(_id: ObjectId!): AttributesGroup!

  """
  Should return brand by _id
  """
  getBrand(_id: ObjectId!): Brand!

  """
  Should return brand by slug
  """
  getBrandBySlug(slug: String!): Brand

  """
  Should return brands list
  """
  getBrandsOptions: [Brand!]!

  """
  Should return catalogue page data
  """
  getCatalogueData(input: CatalogueDataInput!): CatalogueData

  """
  Should return catalogue nav rubrics
  """
  getCatalogueNavRubrics: [Rubric!]!

  """
  Should return top search items
  """
  getCatalogueSearchResult(search: String!): CatalogueSearchResult!

  """
  Should return top search items
  """
  getCatalogueSearchTopItems: CatalogueSearchResult!

  """
  Should return city by given id
  """
  getCity(_id: ObjectId!): City!

  """
  Should return city by given slug
  """
  getCityBySlug(slug: String!): City!

  """
  Should return company by given id
  """
  getCompany(_id: ObjectId!): Company

  """
  Should return gender options
  """
  getGenderOptions: [SelectOption!]!

  """
  Should return ISO languages options
  """
  getISOLanguagesOptions: [SelectOption!]!

  """
  Should return icon options
  """
  getIconsOptions: [SelectOption!]!

  """
  Should return manufacturer by given id
  """
  getManufacturer(_id: ObjectId!): Manufacturer!

  """
  Should return manufacturer by given slug
  """
  getManufacturerBySlug(slug: String!): Manufacturer!

  """
  Should return manufacturers list
  """
  getManufacturersOptions: [Manufacturer!]!

  """
  Should return session user order by given id
  """
  getMyOrder(_id: ObjectId!): Order

  """
  Should return options group by given id
  """
  getOptionsGroup(_id: ObjectId!): OptionsGroup!

  """
  Should return options groups variants options
  """
  getOptionsGroupVariantsOptions: [SelectOption!]!

  """
  Should return order by given id
  """
  getOrder(_id: ObjectId!): Order!

  """
  Should return product by given id
  """
  getProduct(_id: ObjectId!): Product

  """
  Should return product attributes AST for selected rubrics
  """
  getProductAttributesAST(input: ProductAttributesASTInput!): [ProductAttribute!]!

  """
  Should return product by given slug
  """
  getProductBySlug(slug: String!): Product

  """
  Should return product for card page and increase view counter
  """
  getProductCard(slug: [String!]!): Product!

  """
  Should return shops products list for product card
  """
  getProductShops(input: GetProductShopsInput!): [ShopProduct!]!

  """
  Should paginated products
  """
  getProductsList(input: ProductsPaginationInput): ProductsPaginationPayload!

  """
  Should return role by give id
  """
  getRole(_id: ObjectId!): Role

  """
  Should return rubric by given id
  """
  getRubric(_id: ObjectId!): Rubric!

  """
  Should return rubric by given slug
  """
  getRubricBySlug(slug: String!): Rubric!

  """
  Should return rubric variant by given id
  """
  getRubricVariant(_id: ObjectId!): RubricVariant!

  """
  Should return session user cart
  """
  getSessionCart: Cart!

  """
  Should return cities list
  """
  getSessionCities: [City!]!

  """
  Should return currency for session locale
  """
  getSessionCurrency: String!

  """
  Should return shop by given id
  """
  getShop(_id: ObjectId!): Shop!

  """
  Should return shop by given slug
  """
  getShopBySlug(slug: String!): Shop!

  """
  Should return user by _id
  """
  getUser(_id: ObjectId!): User!

  """
  Should return validation messages list
  """
  getValidationMessages: [Message!]!

  """
  Should return session user if authenticated
  """
  me: User
}

input RepeatOrderInput {
  orderId: ObjectId!
}

type Role implements Timestamp {
  _id: ObjectId!
  appNavigation: [NavItem!]!
  cmsNavigation: [NavItem!]!
  createdAt: Date!
  description: String
  isStuff: Boolean!
  name: String!
  nameI18n: JSONObject!
  slug: String!
  updatedAt: Date!
}

type RolePayload implements Payload {
  message: String!
  payload: Role
  success: Boolean!
}

type Rubric {
  _id: ObjectId!
  active: Boolean!
  activeProductsCount: Int!
  attributes: [RubricAttribute!]!
  attributesGroups: [RubricAttributesGroup!]!
  catalogueTitle: RubricCatalogueTitle!
  description: String!
  descriptionI18n: JSONObject!
  name: String!
  nameI18n: JSONObject!
  navItems: [RubricAttribute!]!
  priorities: JSONObject!
  products(input: ProductsPaginationInput): ProductsPaginationPayload!
  productsCount: Int!
  shortDescription: String!
  shortDescriptionI18n: JSONObject!
  slug: String!
  variant: RubricVariant!
  variantId: ObjectId!
  views: JSONObject!
}

type RubricAttribute {
  _id: ObjectId!
  metric: Metric
  name: String!
  nameI18n: JSONObject!
  options: [RubricOption!]!
  optionsGroup: OptionsGroup
  optionsGroupId: ObjectId
  positioningInTitle: JSONObject
  priorities: JSONObject!
  showInCatalogueFilter: Boolean!
  showInCatalogueNav: Boolean!
  slug: String
  variant: AttributeVariant!
  viewVariant: AttributeViewVariant!
  views: JSONObject!
}

type RubricAttributesGroup {
  _id: ObjectId!
  attributes: [RubricAttribute!]!
  attributesIds: [ObjectId!]!
  name: String!
  nameI18n: JSONObject!
}

type RubricCatalogueTitle {
  defaultTitle: String!
  defaultTitleI18n: JSONObject!
  gender: Gender!
  keyword: String!
  keywordI18n: JSONObject!
  prefix: String
  prefixI18n: JSONObject
}

input RubricCatalogueTitleInput {
  defaultTitleI18n: JSONObject!
  gender: Gender!
  keywordI18n: JSONObject!
  prefixI18n: JSONObject
}

type RubricOption {
  _id: ObjectId!
  color: String
  icon: String
  isSelected: Boolean!
  name: String!
  nameI18n: JSONObject!
  options: [RubricOption!]!
  priorities: JSONObject!
  slug: String!
  variants: JSONObject!
  views: JSONObject!
}

type RubricPayload implements Payload {
  message: String!
  payload: Rubric
  success: Boolean!
}

input RubricProductsCountersInput {
  """
  Filter by current attributes
  """
  attributesIds: [ObjectId!]

  """
  Exclude current products
  """
  excludedProductsIds: [ObjectId!]
}

type RubricVariant {
  _id: ObjectId!
  name: String!
  nameI18n: JSONObject!
}

type RubricVariantPayload implements Payload {
  message: String!
  payload: RubricVariant
  success: Boolean!
}

"""
Type for all selects options.
"""
type SelectOption {
  _id: String!
  icon: String
  name: String!
}

type Shop implements Base & Timestamp {
  _id: ObjectId!
  address: Address!
  assets: [Asset!]!
  city: City!
  citySlug: String!
  company: Company!
  companyId: ObjectId!
  contacts: Contacts!
  createdAt: Date!
  itemId: String!
  logo: Asset!
  name: String!
  productsCount: Int!
  shopProducts(input: PaginationInput): ShopProductsPaginationPayload!
  shopProductsIds: [ObjectId!]!
  slug: String!
  updatedAt: Date!
}

type ShopPayload implements Payload {
  message: String!
  payload: Shop
  success: Boolean!
}

type ShopProduct implements Timestamp {
  _id: ObjectId!
  available: Int!
  citySlug: String!
  createdAt: Date!
  discountedPercent: Int
  formattedOldPrice: String
  formattedPrice: String!
  inCartCount: Int!
  oldPrices: [ShopProductOldPrice!]!
  price: Int!
  product: Product!
  productId: ObjectId!
  shop: Shop!
  shopId: ObjectId!
  updatedAt: Date!
}

type ShopProductOldPrice implements Timestamp {
  createdAt: Date!
  price: Int!
  updatedAt: Date!
}

type ShopProductPayload implements Payload {
  message: String!
  payload: ShopProduct
  success: Boolean!
}

type ShopProductsPaginationPayload implements PaginationPayload {
  docs: [ShopProduct!]!
  hasNextPage: Boolean!
  hasPrevPage: Boolean!
  limit: Int!
  page: Int!
  sortBy: String!
  sortDir: SortDirection!
  totalActiveDocs: Int!
  totalDocs: Int!
  totalPages: Int!
}

type ShopsPaginationPayload implements PaginationPayload {
  docs: [Shop!]!
  hasNextPage: Boolean!
  hasPrevPage: Boolean!
  limit: Int!
  page: Int!
  sortBy: String!
  sortDir: SortDirection!
  totalActiveDocs: Int!
  totalDocs: Int!
  totalPages: Int!
}

input SignUpInput {
  email: EmailAddress!
  lastName: String
  name: String!
  password: String!
  phone: PhoneNumber!
  secondName: String
}

"""
Sort direction enum.
"""
enum SortDirection {
  ASC
  DESC
}

interface Timestamp {
  createdAt: Date!
  updatedAt: Date!
}

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

input UpdateAssetConfigInput {
  assets: [Upload!]!
  configId: ObjectId!
}

input UpdateAttributeInGroupInput {
  attributeId: ObjectId!
  attributesGroupId: ObjectId!
  metricId: ObjectId
  nameI18n: JSONObject!
  optionsGroupId: ObjectId
  positioningInTitle: JSONObject
  variant: AttributeVariant!
  viewVariant: AttributeViewVariant!
}

input UpdateAttributeInRubricInput {
  attributeId: ObjectId!
  rubricId: ObjectId!
}

input UpdateAttributesGroupInput {
  attributesGroupId: ObjectId!
  nameI18n: JSONObject!
}

input UpdateBrandInput {
  brandId: ObjectId!
  descriptionI18n: JSONObject
  nameI18n: JSONObject!
  url: [URL!]
}

input UpdateCityInCountryInput {
  cityId: ObjectId!
  countryId: ObjectId!
  nameI18n: JSONObject!
  slug: String!
}

input UpdateCollectionInBrandInput {
  brandCollectionId: ObjectId!
  brandId: ObjectId!
  descriptionI18n: JSONObject
  nameI18n: JSONObject!
}

input UpdateCompanyInput {
  companyId: ObjectId!
  contacts: ContactsInput!
  name: String!
  ownerId: ObjectId!
  staffIds: [ObjectId!]!
}

input UpdateCompanyLogoInput {
  companyId: ObjectId!
  logo: [Upload!]!
}

input UpdateConfigInput {
  cities: JSONObject!
  configId: ObjectId!
}

input UpdateCountryInput {
  countryId: ObjectId!
  currency: String!
  name: String!
}

input UpdateCurrencyInput {
  currencyId: ObjectId!
  name: String!
}

input UpdateLanguageInput {
  languageId: ObjectId!
  name: String!
  nativeName: String!
  slug: String!
}

input UpdateManufacturerInput {
  descriptionI18n: JSONObject
  manufacturerId: ObjectId!
  nameI18n: JSONObject!
  url: [URL!]
}

input UpdateMetricInput {
  metricId: ObjectId!
  nameI18n: JSONObject!
}

input UpdateMyPasswordInput {
  newPassword: String!
  newPasswordB: String!
  oldPassword: String!
}

input UpdateMyProfileInput {
  email: EmailAddress!
  lastName: String
  name: String!
  phone: PhoneNumber!
  secondName: String
}

input UpdateOptionInGroupInput {
  color: String
  gender: Gender
  icon: String
  nameI18n: JSONObject!
  optionId: ObjectId!
  optionsGroupId: ObjectId!
  variants: JSONObject!
}

input UpdateOptionsGroupInput {
  nameI18n: JSONObject!
  optionsGroupId: ObjectId!
  variant: OptionsGroupVariant!
}

input UpdateProductAssetIndexInput {
  assetNewIndex: Int!
  assetUrl: String!
  productId: ObjectId!
}

input UpdateProductCounterInput {
  productSlug: String!
}

input UpdateProductInCartInput {
  amount: Int!
  cartProductId: ObjectId!
}

input UpdateProductInput {
  active: Boolean!
  attributes: [ProductAttributeInput!]!
  brandCollectionSlug: String
  brandSlug: String
  descriptionI18n: JSONObject!
  manufacturerSlug: String
  nameI18n: JSONObject!
  originalName: String!
  productId: ObjectId!
  rubricId: ObjectId!
}

input UpdateRoleInput {
  description: String
  isStuff: Boolean!
  nameI18n: JSONObject!
  roleId: ObjectId!
}

input UpdateRubricInput {
  active: Boolean!
  catalogueTitle: RubricCatalogueTitleInput!
  descriptionI18n: JSONObject!
  nameI18n: JSONObject!
  rubricId: ObjectId!
  shortDescriptionI18n: JSONObject!
  variantId: ObjectId!
}

input UpdateRubricVariantInput {
  nameI18n: JSONObject!
  rubricVariantId: ObjectId!
}

input UpdateShopAssetIndexInput {
  assetNewIndex: Int!
  assetUrl: String!
  shopId: ObjectId!
}

input UpdateShopInput {
  address: AddressInput!
  citySlug: String!
  contacts: ContactsInput!
  name: String!
  shopId: ObjectId!
}

input UpdateShopLogoInput {
  logo: [Upload!]!
  shopId: ObjectId!
}

input UpdateShopProductInput {
  available: Int!
  price: Int!
  productId: ObjectId!
  shopProductId: ObjectId!
}

input UpdateUserInput {
  email: EmailAddress!
  lastName: String
  name: String!
  phone: PhoneNumber!
  roleId: ObjectId!
  secondName: String
  userId: ObjectId!
}

"""
Upload custom scalar type
"""
scalar Upload

type User implements Base & Timestamp {
  _id: ObjectId!
  createdAt: Date!
  email: EmailAddress!
  formattedPhone: FormattedPhone!
  fullName: String!
  itemId: String!
  lastName: String
  name: String!
  orders(input: PaginationInput): OrdersPaginationPayload!
  phone: PhoneNumber!
  role: Role!
  roleId: ObjectId!
  secondName: String
  shortName: String!
  updatedAt: Date!
}

type UserPayload implements Payload {
  message: String!
  payload: User
  success: Boolean!
}

type UsersPaginationPayload implements PaginationPayload {
  docs: [User!]!
  hasNextPage: Boolean!
  hasPrevPage: Boolean!
  limit: Int!
  page: Int!
  sortBy: String!
  sortDir: SortDirection!
  totalActiveDocs: Int!
  totalDocs: Int!
  totalPages: Int!
}
